console.log("statement_details.js");

function loadStatementFragment() {
  fetch('/statement/fragment')
    .then(res => res.text())
    .then(html => {
      const section = document.getElementById("section-statements");
      section.innerHTML = html;
      initStatementEvents?.();         // –ú–æ–¥–∞–ª–∫–∞, —Ñ–æ—Ä–º—ã –∏ —Ç.–¥.
      initStatementFilter?.();         // –§–∏–ª—å—Ç—Ä—ã
      initStatementRowClicks?.();      // üî• –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏!
    });
}

function deleteStatement(statementId) {
  if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–µ–π—Ç–º–µ–Ω—Ç?")) return;

  fetch(`/statement/delete/${statementId}`, {
    method: 'DELETE'
  })
    .then(res => res.json())
    .then(data => {
      if (data.status === 'deleted') {
        alert("–°—Ç–µ–π—Ç–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.");
        loadStatementFragment(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'));
      }
    })
    .catch(err => {
      console.error(err);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.");
    });
}