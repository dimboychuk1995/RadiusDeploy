from flask import Flask, render_template, session, redirect, url_for
import logging
from auth import auth_bp, login_manager
from trucks import trucks_bp, trucks_list
from drivers import drivers_bp
from dispatch import dispatch_bp
from Test.loads import loads_bp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Blueprint –≥—Ä—É–∑–æ–≤
from flask_login import current_user, login_required
from pymongo import MongoClient
from bson.objectid import ObjectId
import os

app = Flask(__name__)
app.secret_key = 'secret'

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('uploads'):
    os.makedirs('uploads')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ MongoDB
client = MongoClient('mongodb://localhost:27017/')
db = client['trucks_db']
drivers_collection = db['drivers']
trucks_collection = db['trucks']
users_collection = db['users']
loads_collection = db['loads']

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(trucks_bp)
app.register_blueprint(drivers_bp)
app.register_blueprint(dispatch_bp)
app.register_blueprint(loads_bp)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Flask-Login
login_manager.init_app(app)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"Internal Server Error: {e}")
    return render_template('error.html', message="Internal Server Error"), 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    if current_user.is_authenticated:
        return render_template('index.html')
    else:
        return redirect(url_for('auth.login'))

# –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç—Ä–∞–∫–æ–≤
@app.route('/trucks')
def trucks():
    return trucks_list()

# üî• –ù–û–í–û–ï: –§–†–ê–ì–ú–ï–ù–¢–´ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –≤–æ –≤–∫–ª–∞–¥–∫–∏
@app.route('/fragment/drivers')
@login_required
def fragment_drivers():
    drivers = list(drivers_collection.find({'company': current_user.company}))
    trucks = list(trucks_collection.find({'company': current_user.company}))

    truck_units = {str(truck['_id']): truck['unit_number'] for truck in trucks}

    for driver in drivers:
        driver['_id'] = str(driver['_id'])
        driver['truck_unit'] = truck_units.get(driver.get('truck'), '–ù–µ—Ç —Ç—Ä–∞–∫–∞')

    return render_template('fragments/drivers_fragment.html', drivers=drivers)

@app.route('/fragment/trucks')
@login_required
def fragment_trucks():
    return render_template('fragments/trucks_fragment.html')

@app.route('/fragment/dispatch')
@login_required
def fragment_dispatch():
    return render_template('fragments/dispatch_fragment.html')

@app.route('/fragment/loads')
@login_required
def fragment_loads():
    return render_template('fragments/loads_fragment.html')

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(debug=True)
