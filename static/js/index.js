function initNavigation() {
  const allButtons = document.querySelectorAll("button[data-section][data-url]");

  const fragmentInitializers = {
    'trucks': () => {
      initTruckModalActions?.();
      initTruckDetailsClick?.();
      restoreOpenTruckSections();  
      filterTrucks();
    },
    'drivers': () => {
      initDriverFilter?.();
      initDriverModalActions?.();
      initDriverParser?.();
      highlightExpiringDrivers?.();
      restoreOpenDriverSections();
      filterDrivers();
    },
    'dispatch_fragment': () => {
      initDispatcherCalendars?.();
      bindWeekSwitchers();
    },
    'dispatch_brokers': () => initBrokerCustomerSection?.(),
    'dispatch_schedule': () => initDispatchSchedule?.(),
    'accounting': () => initAccountingButtons?.(),
    'statements': () => {
      initStatementEvents?.();
    },
    'statement_dispatchers': () => {
      initStatementDispatcherEvents?.();
    },
    'fuel_cards': () => initFuelCards?.(),
    'fuel_cards_summary': () => initFuelCardsSummary?.(),
    'fuel_cards_transactions': () => initFuelCardTransactions?.(),
    'samsara': () => initSamsara?.(),
    'loads_fragment': () => {
      initLoadParser?.();
      initLoads?.();
      initBrokerCustomerSelect?.();
    },
    'logbook': () => initLogbook?.(),
    'tolls': () => {
      initTolls?.();
      initTransponderForm?.();
      loadTransponders?.();
      initVehicleSelect?.();
      initCsvUpload?.();
      initTollForm?.();
      loadAllTolls?.(0, limitPerPage);
      initTollCsvUpload?.();
      populateTollSummaryWeeks?.();
    },
    'fleet': () => {
      initFleet?.();
      initFleetUnitClicks?.();
      loadFleetCharts?.();
    },
    'equipment': () => {
      initEquipment?.();
    },
    'load_stats_fragment': () => loadGeneralStats?.(),
    'safety': () => initSafety?.(),
    'safety_ifta': () => initIFTA?.(),
    'chat': () => initChat?.(),
    'documents': () => initDocuments?.(),
    'factoring': () => {
      console.log("üìÑ Factoring —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω");
    },
  };

  function loadFragment(sectionId, url, sectionKey) {
    const section = document.getElementById(sectionId);
    if (!section.dataset.loaded) {
      fetch(url)
        .then(res => res.text())
        .then(html => {
          section.innerHTML = html;
          section.dataset.loaded = "true";
          fragmentInitializers[sectionKey]?.();  // –≤—ã–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        });
    } else {
      fragmentInitializers[sectionKey]?.();  // ‚¨Ö –≤—ã–∑—ã–≤–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    }
  }

  allButtons.forEach(button => {
    button.addEventListener("click", () => {
      const sectionKey = button.dataset.section;
      const url = button.dataset.url;
      const sectionId = `section-${sectionKey}`;

      // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
      // –¢–µ–ø–µ—Ä—å —Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ (drivers, trucks –∏ —Ç.–¥.)
      document.querySelectorAll('.content-section').forEach(sec => {
        sec.style.display = 'none';
      });


      // –û—á–∏—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, –≤–∞–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å —î—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!!!
      ["driver-details", "unit_details_fragment", "load-details"].forEach(id => {
        const el = document.getElementById(id);
        if (el) {
          el.style.display = "none";
          el.innerHTML = "";
        }
      });

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏`
      allButtons.forEach(btn => btn.classList.remove("active"));

      // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
      button.classList.add("active");
      const section = document.getElementById(sectionId);
      if (section) {
        section.style.display = 'block';
        loadFragment(sectionId, url, sectionKey);
        localStorage.setItem('activeSection', button.id);
      }
    });
  });

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const activeId = localStorage.getItem('activeSection');
  if (activeId) {
    document.getElementById(activeId)?.click();
  } else {
    allButtons[0]?.click();
  }

  // –°—Ç—Ä–µ–ª–∫–∏ –ø–æ–¥–º–µ–Ω—é
  [
    { arrowId: "dispatcherDropdownArrow", submenuId: "dispatcherSubmenu" },
    { arrowId: "loadsDropdownArrow", submenuId: "loadsSubmenu" },
    { arrowId: "samsaraDropdownArrow", submenuId: "samsaraSubmenu" },
    { arrowId: "safetyDropdownArrow", submenuId: "safetySubmenu" },
    { arrowId: "fuelCardsDropdownArrow", submenuId: "fuelCardsSubmenu" },
    { arrowId: "fleetDropdownArrow", submenuId: "fleetSubmenu" },
    { arrowId: "statementsDropdownArrow", submenuId: "statementsSubmenu" }
  ]
      .forEach(({ arrowId, submenuId }) => {
    const arrow = document.getElementById(arrowId);
    const submenu = document.getElementById(submenuId);
    if (arrow && submenu) {
      arrow.addEventListener("click", (e) => {
        e.stopPropagation();
        const isVisible = submenu.style.display === "block";
        submenu.style.display = isVisible ? "none" : "block";
        arrow.innerHTML = isVisible ? "&#9662;" : "&#9652;";
      });
    }
  });
}


// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
document.addEventListener("DOMContentLoaded", () => {
  initNavigation();
  initGlobalTooltips();
  initAddressAutocompleteNew();
  __initBootstrapDatepickers(document); // ‚¨Ö –¥–æ–±–∞–≤–∏–ª–∏
});

async function initAddressAutocompleteNew() {
  const res = await fetch("/api/mapbox_token");
  const data = await res.json();

  if (!data.success || !data.token) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Mapbox");
    return;
  }

  const token = data.token;

  const observer = new MutationObserver(mutations => {
    for (const mutation of mutations) {
      if (mutation.type === "childList") {
        mutation.addedNodes.forEach(node => {
          if (!(node instanceof HTMLElement)) return;

          const inputs = node.querySelectorAll('input[data-autocomplete="mapbox"]');
          inputs.forEach(input => attachMapboxAutocomplete(input, token));
        });
      }
    }
  });

  observer.observe(document.body, { childList: true, subtree: true });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  document.querySelectorAll('input[data-autocomplete="mapbox"]').forEach(input => {
    attachMapboxAutocomplete(input, token);
  });
}

function attachMapboxAutocomplete(input, token) {
  if (input.dataset.autocompleteInitialized) return;

  let suggestionBox = null;

  const boxId = input.dataset.suggestions || (input.id + "-suggestions");
  suggestionBox = document.getElementById(boxId);

  if (!suggestionBox) {
    suggestionBox = document.createElement("div");
    suggestionBox.className = "autocomplete-suggestions";
    suggestionBox.id = boxId;
    input.insertAdjacentElement("afterend", suggestionBox);
  }

  input.addEventListener("input", async () => {
    const query = input.value.trim();
    if (query.length < 3) {
      suggestionBox.innerHTML = "";
      return;
    }

    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json?` +
                `access_token=${token}&autocomplete=true&language=en&limit=5&country=us&proximity=-87.62,41.88`;

    try {
      const res = await fetch(url);
      const data = await res.json();
      suggestionBox.innerHTML = "";

      if (!data.features) return;

      data.features.forEach(feature => {
        const div = document.createElement("div");
        div.textContent = feature.place_name;
        div.className = "autocomplete-suggestion-item";
        div.addEventListener("click", () => {
          input.value = feature.place_name;
          suggestionBox.innerHTML = "";
        });
        suggestionBox.appendChild(div);
      });
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏:", err);
    }
  });

  document.addEventListener("click", (e) => {
    if (!suggestionBox.contains(e.target) && e.target !== input) {
      suggestionBox.innerHTML = "";
    }
  });

  input.dataset.autocompleteInitialized = "true";
}

/* === Global Bootstrap Datepicker init (EN, mm/dd/yyyy, bottom, sticky to input) === */
(function () {
  function getScrollParent(el) {
    let p = el.parentElement;
    const regex = /(auto|scroll)/;
    while (p && p !== document.body) {
      const cs = getComputedStyle(p);
      if (regex.test(cs.overflow + cs.overflowY + cs.overflowX)) return p;
      p = p.parentElement;
    }
    return window; // fallback
  }

  function attachStickyReposition(input, instance) {
    // instance = $inp.data('datepicker')
    const $inp = jQuery(input);

    function placeIfVisible() {
      // –≤–∏–¥–µ–Ω –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å (popper –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å–∫—Ä—ã—Ç)
      const dp = $inp.data('datepicker');
      if (!dp || !dp.picker || dp.picker.is(':hidden')) return;
      if (typeof dp.place === 'function') dp.place();
    }

    // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∫—Ä–æ–ª–ª-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –æ–∫–Ω–∞
    const sp = getScrollParent(input);
    const onScroll = () => placeIfVisible();
    const onResize = () => placeIfVisible();

    // —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏ destroy –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω—è—Ç—å
    input.__dpEvents = input.__dpEvents || [];
    if (sp === window) {
      window.addEventListener('scroll', onScroll, { passive: true });
      input.__dpEvents.push(() => window.removeEventListener('scroll', onScroll));
    } else {
      sp.addEventListener('scroll', onScroll, { passive: true });
      input.__dpEvents.push(() => sp.removeEventListener('scroll', onScroll));
    }
    window.addEventListener('resize', onResize);
    input.__dpEvents.push(() => window.removeEventListener('resize', onResize));

    // —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–∏ focus/keyup (–Ω–∞ –≤—Å—è–∫–∏–π)
    $inp.on('keyup focus', placeIfVisible);
  }

  function initBootstrapDatepickers(scope) {
    if (!window.jQuery || !jQuery.fn.datepicker) {
      console.warn('[bootstrap-datepicker] not loaded: check CSS/JS includes in base.html');
      return;
    }

    const root = scope instanceof Element ? scope : (scope ? document.querySelector(scope) : document);

    const candidates = root.querySelectorAll(
      'input.datepicker-input, input[data-datepicker], input[type="date"][data-upgrade="1"]'
    );

    candidates.forEach(inp => {
      const $inp = jQuery(inp);
      if ($inp.data('__bdp')) return;

      if (inp.type === 'date' && inp.getAttribute('data-upgrade') === '1') {
        try { inp.type = 'text'; } catch (e) {}
      }

      const fmt  = inp.getAttribute('data-date-format')   || 'mm/dd/yyyy';
      const lang = inp.getAttribute('data-date-language') || 'en';

      $inp.datepicker({
        format: fmt,
        language: lang,
        autoclose: true,
        todayHighlight: true,
        clearBtn: true,
        orientation: 'bottom',     // –≤–Ω–∏–∑
        container: 'body',         // –ø–æ–≤–µ—Ä—Ö –æ—Ñ—Ñ–∫–∞–Ω–≤–∞—Å–∞
        zIndexOffset: 3000,
        weekStart: 0,
        templates: {
          leftArrow:  '&laquo;',
          rightArrow: '&raquo;'
        }
      })
      .on('show', () => {
        // —Å—Ä–∞–∑—É –ø–æ–ø—Ä–∞–≤–∏–º –ø–æ–∑–∏—Ü–∏—é
        const dp = $inp.data('datepicker');
        if (dp && typeof dp.place === 'function') dp.place();
      })
      .on('changeDate', function(){
        $inp.trigger('change');
      });

      // –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º –∫ —Å–∫—Ä–æ–ª–ª—É/resize
      attachStickyReposition(inp, $inp.data('datepicker'));

      $inp.data('__bdp', true);
    });
  }

  // –ü—É–±–ª–∏—á–Ω–æ
  window.__initBootstrapDatepickers = initBootstrapDatepickers;

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  document.addEventListener('DOMContentLoaded', () => {
    initBootstrapDatepickers(document);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã
  const mo = new MutationObserver(list => {
    for (const m of list) {
      if (m.type === 'childList' && m.addedNodes?.length) {
        m.addedNodes.forEach(node => {
          if (node instanceof HTMLElement) initBootstrapDatepickers(node);
        });
      }
    }
  });
  mo.observe(document.body, { childList: true, subtree: true });
})();