// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã Mapbox + –ª–æ–≥–∏–∫–∞ Samsara ===
function initSamsara() {
    console.log("üöÄ initSamsara started");

    const mapEl = document.getElementById("samsara-map");
    if (!mapEl) {
        console.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç #samsara-map –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
    }

    const token = mapEl.dataset.mapboxToken;
    if (!token) {
        console.error("‚ùå Mapbox token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç–ª–µ–º–µ–Ω—Ç–µ #samsara-map");
        return;
    }

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    const map = initMap(token);

    // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
    addMapControls(map);

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —é–Ω–∏—Ç—ã Samsara
    loadAndRenderSamsaraUnits(map);
}

// === –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã ===
function initMap(token) {
    mapboxgl.accessToken = token;

    const map = new mapboxgl.Map({
        container: 'samsara-map',
        style: 'mapbox://styles/mapbox/navigation-day-v1',
        center: [-98.5795, 39.8283], // —Ü–µ–Ω—Ç—Ä –°–®–ê
        zoom: 4
    });

    console.log("üó∫Ô∏è Map initialized");
    return map;
}

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π ===
function addMapControls(map) {
    map.addControl(new mapboxgl.NavigationControl(), "top-right");
    console.log("üõ†Ô∏è Controls added");
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ —é–Ω–∏—Ç–æ–≤ Samsara –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ ===
function loadAndRenderSamsaraUnits(map) {
    console.log("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —é–Ω–∏—Ç–æ–≤ Samsara...");
    
    fetch("/api/samsara/vehicles") // <-- —Ç—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —é–Ω–∏—Ç–æ–≤
        .then(res => res.json())
        .then(data => {
            if (!data.success || !data.vehicles) {
                console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —é–Ω–∏—Ç—ã Samsara", data);
                return;
            }

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —é–Ω–∏—Ç–æ–≤: ${data.vehicles.length}`);
            data.vehicles.forEach(vehicle => {
                if (vehicle.lng && vehicle.lat) {
                    addVehicleMarker(map, vehicle);
                }
            });
        })
        .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —é–Ω–∏—Ç–æ–≤ Samsara", err));
}

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è —é–Ω–∏—Ç–∞ ===
function addVehicleMarker(map, vehicle) {
    new mapboxgl.Marker({ color: "red" })
        .setLngLat([vehicle.lng, vehicle.lat])
        .setPopup(new mapboxgl.Popup().setHTML(`
            <strong>${vehicle.name || "–ë–µ–∑ –∏–º–µ–Ω–∏"}</strong><br>
            ${vehicle.licensePlate || ""}
        `))
        .addTo(map);
}
