let lastCreatedAt = null;
let currentSearch = '';

function initFuelCards() {
    console.log('init Fuel Cards called');
    setupOpenModalButton();
    setupFuelCardFormSubmit();
    loadFuelCards();
    setupTransactionUpload();
    setupUploadTransactionsModalButton();

    // üÜï –î–æ–±–∞–≤—å —ç—Ç–æ:
    document.getElementById('btn-show-more')?.addEventListener('click', () => {
        loadFuelCards(false);
    });

    document.getElementById('fuel-card-search')?.addEventListener('input', function () {
        currentSearch = this.value.trim();
        lastCreatedAt = null; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        loadFuelCards(true);
    });

}

// === –ö–Ω–æ–ø–∫–∏ ===

function setupOpenModalButton() {
    const btn = document.getElementById('btn-open-fuel-card-modal');
    console.log("üîç –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞?", !!btn);
    if (!btn) return;

    btn.addEventListener('click', () => {
        console.log("üéØ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞");
        resetFuelCardForm();
        openFuelCardModal();
        loadFuelCardDriverOptions();  // ‚Üê –Ω–æ–≤–æ–µ –∏–º—è
    });
}

function setupUploadTransactionsModalButton() {
    document.getElementById('btn-upload-transactions')?.addEventListener('click', () => {
        openUploadTransactionsModal();
    });
}

// === –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã ===

function setupFuelCardFormSubmit() {
    document.getElementById('fuel-card-form')?.addEventListener('submit', function (e) {
        e.preventDefault();
        const data = collectFuelCardFormData();
        submitFuelCard(data);
    });
}

function resetFuelCardForm() {
    document.getElementById('fuel-card-form').reset();
}

function collectFuelCardFormData() {
    return {
        provider: document.getElementById('provider').value,
        card_number: document.getElementById('card_number').value,
        driver_id: document.getElementById('driver_id').value,
        vehicle_id: document.getElementById('vehicle_id').value,
        assigned_driver: document.getElementById('assigned_driver').value
    };
}

function submitFuelCard(data) {
    fetch('/fuel_cards/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(res => res.json())
    .then(result => {
        if (result.success) {
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
            closeFuelCardModal();
            loadFuelCards();
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', result.error);
        }
    })
    .catch(err => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
    });
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π ===

function loadFuelCardDriverOptions() {
    console.log("üì° loadFuelCardDriverOptions CALLED");

    fetch('/fuel_cards/drivers')
        .then(res => {
            console.log("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:", res.status);
            return res.json();
        })
        .then(drivers => {
            console.log("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π...", drivers);
            populateDriverSelect(drivers);
        })
        .catch(err => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π:", err);
        });
}

function populateDriverSelect(drivers) {
    const select = document.getElementById('assigned_driver');
    if (!select) {
        console.error("‚ùå <select id='assigned_driver'> –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
    }

    select.innerHTML = '';
    drivers.forEach(driver => {
        const option = document.createElement('option');
        option.value = driver._id;
        option.textContent = driver.name;
        select.appendChild(option);
    });

    console.log("‚úÖ –í–æ–¥–∏—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ select");
}





// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç ===
function loadFuelCards(isInitial = true) {
    let url = '/fuel_cards/list';
    const params = new URLSearchParams();

    if (!isInitial && lastCreatedAt) {
        params.append('after', lastCreatedAt);
    }
    if (currentSearch) {
        params.append('search', currentSearch);
    }

    if ([...params].length > 0) {
        url += '?' + params.toString();
    }

    fetch(url)
        .then(res => res.json())
        .then(cards => {
            if (cards.length === 0 && !isInitial) {
                document.getElementById('btn-show-more')?.classList.add("d-none");
                return;
            }

            populateFuelCardTable(cards, isInitial);
            const last = cards[cards.length - 1];
            lastCreatedAt = last?.created_at || null;
        })
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç:", err);
        });
}

function populateFuelCardTable(cards, isInitial) {
    const tbody = document.querySelector('#fuel-cards-table tbody');
    if (isInitial) tbody.innerHTML = ''; // —Å–±—Ä–æ—Å –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑

    cards.forEach(card => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${card.provider || ''}</td>
            <td>${card.card_number || ''}</td>
            <td>${card.driver_id || ''}</td>
            <td>${card.vehicle_id || ''}</td>
            <td>${card.assigned_driver_name || '-'}</td>
        `;
        tbody.appendChild(row);
    });

    document.getElementById('btn-show-more')?.classList.remove("d-none");
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ PDF-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===

function setupTransactionUpload() {
    document.getElementById('upload-transactions-form')?.addEventListener('submit', function (e) {
        e.preventDefault();

        const overlay = document.getElementById("pdfOverlay");
        overlay?.classList.remove("d-none"); // ‚è≥ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä

        const formData = new FormData(this);

        fetch('/fuel_cards/upload_transactions', {
            method: 'POST',
            body: formData
        })
        .then(res => res.json())
        .then(result => {
            try {
                if (result.success) {
                    let html = `<div class="alert alert-info mt-3"><strong>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</strong> ${result.count}</div>`;
                    if (result.summary_by_card?.length) {
                        html += `<ul class="list-group mt-2">`;
                        result.summary_by_card.forEach(entry => {
                            html += `
                                <li class="list-group-item">
                                    (Card ${entry.card_number} - ${entry.driver_name}) 
                                    Qty: ${entry.qty}, 
                                    Retail: $${entry.retail}, 
                                    Invoice: $${entry.invoice}
                                </li>
                            `;
                        });
                        html += `</ul>`;
                    }
                    document.getElementById('upload-summary-container').innerHTML = html;
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: '–û—à–∏–±–∫–∞',
                        text: result.error || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ'
                    });
                }
            } catch (parseError) {
                Swal.fire({
                    icon: 'error',
                    title: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞',
                    text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.'
                });
            }
        })
        .catch(() => {
            Swal.fire({
                icon: 'error',
                title: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞',
                text: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
            });
        })
        .finally(() => {
            overlay?.classList.add("d-none"); // ‚úÖ –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        });
    });
}

// === –ú–æ–¥–∞–ª–∫–∏ ===

function openFuelCardModal() {
    document.getElementById("fuelCardModal").classList.add("show");
    document.querySelector(".custom-offcanvas-backdrop")?.classList.add("show");
}

function closeFuelCardModal() {
    document.getElementById("fuelCardModal").classList.remove("show");
    document.querySelector(".custom-offcanvas-backdrop")?.classList.remove("show");
}

function openUploadTransactionsModal() {
    document.getElementById("uploadTransactionsModal").classList.add("show");
    document.querySelector(".custom-offcanvas-backdrop")?.classList.add("show");
}

function closeUploadTransactionsModal() {
    document.getElementById("uploadTransactionsModal").classList.remove("show");
    document.querySelector(".custom-offcanvas-backdrop")?.classList.remove("show");
}


function initFuelCardsDateRange(context) {
  const input = document.getElementById("fuelCardsDateRange");
  if (!input) return;

  const lastWeekStart = moment().subtract(1, 'weeks').startOf('isoWeek');
  const lastWeekEnd = moment().subtract(1, 'weeks').endOf('isoWeek');

  $(input).daterangepicker({
    startDate: lastWeekStart,
    endDate: lastWeekEnd,
    showDropdowns: true,
    autoApply: false,
    linkedCalendars: false,
    alwaysShowCalendars: true,
    opens: 'center',
    showCustomRangeLabel: true,
    locale: {
      format: 'MM / DD / YYYY',
      applyLabel: 'APPLY',
      cancelLabel: 'CANCEL',
      daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      monthNames: moment.months(),
      firstDay: 1
    },
    ranges: {
      'Last Week': [lastWeekStart, lastWeekEnd],
      'Reset': [moment(), moment()]
    }
  });

  $(input).on('apply.daterangepicker', function(ev, picker) {
    const startIso = picker.startDate.toISOString();
    const endIso = picker.endDate.toISOString();
    const isReset = picker.startDate.isSame(moment(), 'day') && picker.endDate.isSame(moment(), 'day');

    const target = context === 'summary'
      ? document.getElementById("summaryResultsBody")
      : document.getElementById("transactionsResultsBody");

    if (isReset) {
      if (target) target.innerHTML = "";
      return;
    }

    if (target) {
      target.innerHTML = `<div class="text-muted">Loading ${context} from ${startIso} to ${endIso}...</div>`;
    }

    fetchFuelSummaryData(startIso, endIso);

    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`üìÖ Selected range for ${context}:`, startIso, endIso);
  });
}

function initFuelCardsSummary() {
  initFuelCardsDateRange('summary');

  const input = document.getElementById('summarySearch');
  if (input) {
    input.addEventListener('input', (e) => {
      summarySearchTerm = e.target.value.trim().toLowerCase();
      showAll = false;
      renderFuelSummaryTable();
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
  fetchFuelSummaryData();
}


let showAll = false;
let cachedFuelSummaryData = [];
let summarySearchTerm = '';

function fetchFuelSummaryData(startIso, endIso) {
  fetch('/fuel_cards/summary_by_driver')
    .then(res => res.json())
    .then(data => {
      cachedFuelSummaryData = data || [];
      showAll = false;
      renderFuelSummaryTable();
    })
    .catch(err => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ summary:", err);
    });
}

function renderFuelSummaryTable() {
  const container = document.getElementById("summaryResultsBody");
  if (!container) return;

  const search = summarySearchTerm.toLowerCase();

  let filtered = cachedFuelSummaryData.filter(row => {
    const driver = row.driver_name?.toLowerCase() || '';
    const truck = row.unit_number?.toLowerCase() || '';
    return driver.includes(search) || truck.includes(search);
  });

  const dataToRender = showAll ? filtered : filtered.slice(0, 15);

  if (!filtered.length) {
    container.innerHTML = `<div class="alert alert-warning">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>`;
    return;
  }

  let html = `
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>–í–æ–¥–∏—Ç–µ–ª—å</th>
          <th>–¢—Ä–∞–∫</th>
          <th>Qty</th>
          <th>Retail $</th>
          <th>Invoice $</th>
        </tr>
      </thead>
      <tbody>
  `;

  dataToRender.forEach(row => {
    html += `
      <tr>
        <td>${row.driver_name}</td>
        <td>${row.unit_number || '-'}</td>
        <td>${row.qty}</td>
        <td>$${row.retail}</td>
        <td>$${row.invoice}</td>
      </tr>
    `;
  });

  html += `</tbody></table>`;

  if (!showAll && filtered.length > 15) {
    html += `
      <div class="text-center mt-3">
        <button id="btn-show-more-summary" class="btn btn-primary">–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë</button>
      </div>
    `;
  }

  container.innerHTML = html;

  const btn = document.getElementById("btn-show-more-summary");
  if (btn) {
    btn.addEventListener("click", () => {
      showAll = true;
      renderFuelSummaryTable();
    });
  }
}

// üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('summarySearch');
  if (input) {
    input.addEventListener('input', (e) => {
      summarySearchTerm = e.target.value.trim();
      showAll = false;
      renderFuelSummaryTable();
    });
  }
});




function initFuelCardTransactions() {
  initFuelCardsDateRange('transactions');
}