function initStatementEvents() {
  generateWeekRanges("statementWeekRangeSelect");
}

function openDriverStatementModal() {
  document.getElementById("driverStatementModal").classList.add("show");
  document.getElementById("driverStatementBackdrop").classList.add("show");

  generateWeekRanges("driverWeekRangeSelect");
}

function closeDriverStatementModal() {
  document.getElementById("driverStatementModal").classList.remove("show");
  document.getElementById("driverStatementBackdrop").classList.remove("show");
}

async function calculateDriverStatement() {
  const driverId = document.getElementById("driverSelect").value;
  const weekRange = document.getElementById("driverWeekRangeSelect").value;
  const container = document.getElementById("driverStatementResults");

  if (!driverId || !weekRange) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–¥–µ–ª–∏.");
    return;
  }

  container.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>";

  await fetchAndRenderDriverLoads(driverId, weekRange);
  fetchDriverFuelSummary(driverId, weekRange);
  fetchDriverInspections(driverId, weekRange);
  fetchDriverExpenses(driverId, weekRange);
  window.recalculateDriverSalary();
}

function fetchAndRenderDriverLoads(driverId, weekRange) {
  return fetch(`/api/driver_statement_loads?driver_id=${driverId}&week_range=${encodeURIComponent(weekRange)}`)
    .then(res => res.json())
    .then(data => {
      console.log("üì¶ –ì—Ä—É–∑—ã:", data);
      const container = document.getElementById("driverStatementResults");

      if (!data.success || !data.loads.length) {
        container.innerHTML = "<p>–ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>";
        return 0;
      }

      const toDateOnly = (val) => {
        if (!val) return "‚Äî";
        const d = new Date(val);
        if (isNaN(d)) return "‚Äî";
        const mm = String(d.getMonth() + 1).padStart(2, "0");
        const dd = String(d.getDate()).padStart(2, "0");
        const yyyy = d.getFullYear();
        return `${mm}/${dd}/${yyyy}`;
      };

      const getEffectiveDeliveryDate = (load) => {
        // –µ—Å–ª–∏ extra_delivery –º–∞—Å—Å–∏–≤ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
        if (Array.isArray(load.extra_delivery) && load.extra_delivery.length) {
          const last = load.extra_delivery[load.extra_delivery.length - 1];
          return last?.date || null;
        }
        // –µ—Å–ª–∏ extra_delivery –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        if (load.extra_delivery && typeof load.extra_delivery === "object" && load.extra_delivery.date) {
          return load.extra_delivery.date;
        }
        // –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–∞—è delivery.date –∏–ª–∏ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–µ delivery_date
        return (load.delivery && load.delivery.date) || load.delivery_date || null;
      };

      const totalAmount = data.loads.reduce((sum, load) => sum + (load.price || 0), 0);

      const table = document.createElement("table");
      table.className = "table table-sm table-bordered";
      table.innerHTML = `
        <thead>
          <tr>
            <th>‚úì</th>
            <th>Load ID</th>
            <th>Pickup<br><small>Date</small></th>
            <th>Delivery / Extra<br><small>Final Date</small></th>
            <th>Price</th>
          </tr>
        </thead>
        <tbody>
          ${data.loads.map((load) => {
            const checkedAttr = load.out_of_diap ? "" : "checked";

            const pickupAddress = load.pickup?.address || "‚Äî";
            const pickupDateStr = toDateOnly(load.pickup?.date);

            const deliveryAddress = load.delivery?.address || "‚Äî";
            const effectiveDeliveryDate = getEffectiveDeliveryDate(load);
            const deliveryDateStr = toDateOnly(effectiveDeliveryDate);

            return `
              <tr>
                <td>
                  <input type="checkbox" class="load-checkbox" data-price="${load.price}" ${checkedAttr}>
                </td>
                <td>${load.load_id || "‚Äî"}</td>
                <td>
                  <div>${pickupAddress}</div>
                  <div><strong>${pickupDateStr}</strong></div>
                </td>
                <td>
                  <div>${deliveryAddress}</div>
                  <div><strong>${deliveryDateStr}</strong></div>
                </td>
                <td>$${(load.price || 0).toFixed(2)}</td>
              </tr>
            `;
          }).join("")}
        </tbody>
      `;

      container.innerHTML = "";
      container.appendChild(table);

      const checkboxes = container.querySelectorAll(".load-checkbox");
      checkboxes.forEach(cb => {
        cb.addEventListener("change", recalculateDriverSalary);
      });

      return totalAmount;
    })
    .catch(err => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤:", err);
      return 0;
    });
}


function fetchDriverFuelSummary(driverId, weekRange) {
  fetch(`/api/driver_fuel_summary?driver_id=${driverId}&week_range=${encodeURIComponent(weekRange)}`)
    .then(res => res.json())
    .then(data => {
      console.log("‚õΩ –¢–æ–ø–ª–∏–≤–æ:", data);
      const container = document.getElementById("driverStatementResults");

      if (!data.success || !data.fuel) {
        container.insertAdjacentHTML("beforeend", "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø–ª–∏–≤—É</p>");
        return;
      }

      const fuel = data.fuel;
      const fuelHtml = `
        <div class="mt-4">
          <h5>‚õΩ –¢–æ–ø–ª–∏–≤–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</h5>
          <ul>
            <li><strong>Gallons (qty):</strong> ${fuel.qty}</li>
            <li><strong>Retail Total:</strong> $${fuel.retail}</li>
            <li><strong>Invoice Total:</strong> $${fuel.invoice}</li>
            <li><strong>Used Cards:</strong> ${fuel.cards.join(", ")}</li>
          </ul>
        </div>
      `;

      container.insertAdjacentHTML("beforeend", fuelHtml);
    })
    .catch(err => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∑–µ–ª—è:", err);
    });
}

window.recalculateDriverSalary = async function () {
  const container = document.getElementById("driverStatementResults");
  const driverId = document.getElementById("driverSelect").value;
  const weekRange = document.getElementById("driverWeekRangeSelect").value;

  // 1) –ì—Ä–æ—Å—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
  const checkboxes = container.querySelectorAll(".load-checkbox");
  let loadsGross = 0;
  checkboxes.forEach(cb => {
    if (cb.checked) loadsGross += parseFloat(cb.dataset.price || "0");
  });

  // 2) –ò–Ω–≤–æ–π—Å—ã: –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ, —Å—É–º–º—ã ‚Äî –∏–∑ –∏–Ω–ø—É—Ç–æ–≤
  let grossAdd = 0;     // add_gross
  let grossDeduct = 0;  // deduct_gross
  let salaryAdd = 0;    // add_salary
  let salaryDeduct = 0; // deduct_salary
  let visibleTotal = 0; // —Å—É–º–º–∞ –≤—Å–µ—Ö –ù–ï —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–ò—Ç–æ–≥–æ –ø–æ –∏–Ω–≤–æ–π—Å–∞–º")

  const expensesBlock = container.querySelector("#driverExpensesBlock");
  if (expensesBlock) {
    const items = expensesBlock.querySelectorAll(".expense-item");
    items.forEach(item => {
      const removed = item.getAttribute("data-removed") === "1";
      const amountStr = (item.querySelector(".expense-amount")?.value || "0").trim();
      const amount = Math.max(0, parseFloat(amountStr || "0"));
      const action = item.querySelector(".expense-action")?.value || "keep";

      if (!removed) {
        visibleTotal += amount;

        switch (action) {
          case "add_gross":     grossAdd += amount; break;
          case "deduct_gross":  grossDeduct += amount; break;
          case "add_salary":    salaryAdd += amount; break;
          case "deduct_salary": salaryDeduct += amount; break;
          case "keep":
          default: break;
        }
      }
    });

    // –û–±–Ω–æ–≤–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥ –ø–æ –∏–Ω–≤–æ–π—Å–∞–º (—Å —É—á—ë—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è/–ø—Ä–∞–≤–æ–∫)
    const totalEl = expensesBlock.querySelector("#expensesTotalVal");
    if (totalEl) totalEl.textContent = visibleTotal.toFixed(2);
  }

  const grossForCommission = loadsGross + grossAdd - grossDeduct;

  try {
    // 3) –°—Ö–µ–º–∞ –∫–æ–º–∏—Å—Å–∏–∏
    const res = await fetch(`/api/driver_commission_scheme?driver_id=${driverId}&week_range=${encodeURIComponent(weekRange)}`);
    const data = await res.json();
    if (!data.success) {
      console.warn("–û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã –∑–∞—Ä–ø–ª–∞—Ç—ã:", data.error);
      return;
    }

    // 4) –ö–æ–º–∏—Å—Å–∏—è –æ—Ç –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–æ—Å—Å–∞
    let commission = 0;
    if (data.scheme_type === "percent") {
      const table = data.commission_table || [];
      if (table.length === 1) {
        commission = grossForCommission * (table[0].percent / 100);
      } else if (table.length > 1) {
        const matched = table
          .filter(row => grossForCommission >= row.from_sum)
          .sort((a, b) => b.from_sum - a.from_sum)[0];
        if (matched) {
          commission = grossForCommission * (matched.percent / 100);
        }
      }
    }

    // 5) –í—ã—á–µ—Ç—ã –ø–æ —Å—Ö–µ–º–µ + –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ó–ü –∏–∑ –∏–Ω–≤–æ–π—Å–æ–≤
    const schemeDeductions = data.deductions || [];
    const schemeDeductionsTotal = schemeDeductions.reduce((sum, d) => sum + (d.amount || 0), 0);

    const finalSalary =
      commission
      - schemeDeductionsTotal
      - salaryDeduct
      + salaryAdd;

    // 6) –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞
    const old = container.querySelector("#driverSalaryBlock");
    if (old) old.remove();

    const html = `
      <div id="driverSalaryBlock" class="mt-4">
        <h5>üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è:</h5>
        <div class="table-responsive">
          <table class="table table-sm table-bordered align-middle">
            <tbody>
              <tr>
                <th style="width:50%">–ì—Ä–æ—Å—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–∑–∞–º</th>
                <td class="text-end">$${loadsGross.toFixed(2)}</td>
              </tr>
              <tr>
                <th>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≥—Ä–æ—Å—Å–∞ (–∏–Ω–≤–æ–π—Å—ã)</th>
                <td class="text-end">
                  +$${grossAdd.toFixed(2)} (add_gross)
                  &nbsp;&nbsp;‚Äì$${grossDeduct.toFixed(2)} (deduct_gross)
                </td>
              </tr>
              <tr class="table-light">
                <th>–ì—Ä–æ—Å—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏</th>
                <td class="text-end"><strong>$${grossForCommission.toFixed(2)}</strong></td>
              </tr>
              <tr>
                <th>–ö–æ–º–∏—Å—Å–∏—è –ø–æ —Å—Ö–µ–º–µ</th>
                <td class="text-end">$${commission.toFixed(2)}</td>
              </tr>
              <tr>
                <th>–°–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ö–µ–º–µ</th>
                <td class="text-end">‚Äì$${schemeDeductionsTotal.toFixed(2)}</td>
              </tr>
              <tr>
                <th>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ (–∏–Ω–≤–æ–π—Å—ã)</th>
                <td class="text-end">
                  +$${salaryAdd.toFixed(2)} (add_salary)
                  &nbsp;&nbsp;‚Äì$${salaryDeduct.toFixed(2)} (deduct_salary)
                </td>
              </tr>
              <tr class="table-success">
                <th>–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ</th>
                <td class="text-end"><strong>$${finalSalary.toFixed(2)}</strong></td>
              </tr>
            </tbody>
          </table>
        </div>

        ${schemeDeductions.length > 0 ? `
          <h6 class="mt-3">üí∏ –°–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ö–µ–º–µ:</h6>
          <ul>
            ${schemeDeductions.map(d => `
              <li>${d.type}: -$${(d.amount || 0).toFixed(2)}</li>
            `).join("")}
          </ul>
        ` : ""}
      </div>
    `;

    container.insertAdjacentHTML("beforeend", html);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã:", err);
  }
}



function fetchDriverInspections(driverId, weekRange) {
  const container = document.getElementById("driverStatementResults");
  const [start, end] = weekRange.split("-").map(s => s.trim());

  fetch(`/api/driver_inspections_by_range?driver_id=${driverId}&start_date=${start}&end_date=${end}`)
    .then(res => res.json())
    .then(data => {
      console.log("üßæ –ò–Ω—Å–ø–µ–∫—Ü–∏–∏:", data);
      if (!data.success || !data.inspections.length) return;

      const html = `
        <div class="mt-4">
          <h5>üßæ –ò–Ω—Å–ø–µ–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (${data.count}):</h5>
          <table class="table table-sm table-bordered">
            <thead>
              <tr>
                <th>–î–∞—Ç–∞</th>
                <th>–í—Ä–µ–º—è</th>
                <th>–ê–¥—Ä–µ—Å</th>
                <th>Clean</th>
              </tr>
            </thead>
            <tbody>
              ${data.inspections.map(i => `
                <tr>
                  <td>${i.date}</td>
                  <td>${i.start_time}‚Äì${i.end_time}</td>
                  <td>${i.address || "‚Äî"}</td>
                  <td>${i.clean_inspection ? "‚úÖ" : "‚ùå"}</td>
                </tr>
              `).join("")}
            </tbody>
          </table>
        </div>
      `;

      container.insertAdjacentHTML("beforeend", html);
    })
    .catch(err => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–π:", err);
    });
}


function fetchDriverExpenses(driverId, weekRange) {
  const container = document.getElementById("driverStatementResults");
  const [start, end] = weekRange.split("-").map(s => s.trim());

  fetch(`/api/driver_expenses_by_range?driver_id=${driverId}&start_date=${start}&end_date=${end}`)
    .then(res => res.json())
    .then(data => {
      console.log("üìÑ –ò–Ω–≤–æ–π—Å—ã:", data);
      if (!data.success || !data.expenses.length) return;

      const total = data.expenses.reduce((sum, e) => sum + (e.amount || 0), 0);

      const html = `
        <div class="mt-4" id="driverExpensesBlock">
          <h5>üìÑ –ò–Ω–≤–æ–π—Å—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ (<span id="expensesCount">${data.count}</span>):</h5>
          <ul class="list-unstyled mb-2" id="expensesList">
            ${data.expenses.map(e => `
              <li
                class="expense-item d-flex align-items-center gap-2 mb-2"
                data-expense-id="${e._id}"
                data-removed="0"
              >
                <div class="flex-grow-1">
                  <div><strong>${e.date}</strong> ‚Ä¢ ${e.category || "‚Äî"} ‚Äî ${e.note || "‚Äî"}</div>
                  <div class="d-flex align-items-center gap-2 mt-1">
                    <label class="form-label m-0">–°—É–º–º–∞:</label>
                    <input
                      type="number"
                      class="form-control form-control-sm expense-amount"
                      step="0.01"
                      min="0"
                      value="${(e.amount || 0).toFixed(2)}"
                      style="width:140px"
                    />
                    <select
                      class="form-select form-select-sm expense-action"
                      style="width:210px"
                    >
                      <option value="keep" selected>–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å</option>
                      <option value="deduct_salary">–°–Ω—è—Ç—å —Å –∑–∞—Ä–ø–ª–∞—Ç—ã</option>
                      <option value="add_salary">–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞—Ä–ø–ª–∞—Ç—É</option>
                      <option value="deduct_gross">–°–Ω—è—Ç—å —Å –≥—Ä–æ—Å—Å–∞</option>
                      <option value="add_gross">–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä–æ—Å—Å</option>
                    </select>

                    <button type="button" class="btn btn-sm btn-outline-danger expense-remove-btn">
                      –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–∞
                    </button>
                  </div>
                </div>
              </li>
            `).join("")}
          </ul>
          <div class="text-muted">
            <strong>–ò—Ç–æ–≥–æ –ø–æ –∏–Ω–≤–æ–π—Å–∞–º:</strong>
            $<span id="expensesTotalVal">${total.toFixed(2)}</span>
          </div>
        </div>
      `;

      container.insertAdjacentHTML("beforeend", html);

      // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
      const expensesBlock = container.querySelector("#driverExpensesBlock");
      expensesBlock.querySelectorAll(".expense-action").forEach(sel => {
        sel.addEventListener("change", window.recalculateDriverSalary);
      });
      expensesBlock.querySelectorAll(".expense-amount").forEach(inp => {
        inp.addEventListener("input", window.recalculateDriverSalary);
      });

      // –£–¥–∞–ª–µ–Ω–∏–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ (–≤–∏–∑—É–∞–ª—å–Ω–æ –∏ –∏–∑ —Ä–∞—Å—á—ë—Ç–∞)
      expensesBlock.querySelectorAll(".expense-remove-btn").forEach(btn => {
        btn.addEventListener("click", (ev) => {
          const li = ev.currentTarget.closest(".expense-item");
          const removed = li.getAttribute("data-removed") === "1";
          if (!removed) {
            li.setAttribute("data-removed", "1");
            li.style.opacity = "0.5";
            ev.currentTarget.classList.remove("btn-outline-danger");
            ev.currentTarget.classList.add("btn-outline-secondary");
            ev.currentTarget.textContent = "–í–µ—Ä–Ω—É—Ç—å –≤ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç";
          } else {
            li.setAttribute("data-removed", "0");
            li.style.opacity = "1";
            ev.currentTarget.classList.remove("btn-outline-secondary");
            ev.currentTarget.classList.add("btn-outline-danger");
            ev.currentTarget.textContent = "–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–∞";
          }
          window.recalculateDriverSalary();
        });
      });
    })
    .catch(err => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–æ–≤:", err);
    });
}



// Statement for All drrivers 

function openAllDriversStatementModal() {
  document.getElementById("allDriversStatementModal").classList.add("show");
  document.getElementById("allDriversStatementBackdrop").classList.add("show");

  // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å, –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–π –º–æ–¥–∞–ª–∫–∏
  generateWeekRanges("allDriversWeekRangeSelect");
  loadDriversGroupedByCompany();
}

function closeAllDriversStatementModal() {
  document.getElementById("allDriversStatementModal").classList.remove("show");
  document.getElementById("allDriversStatementBackdrop").classList.remove("show");
}


async function loadDriversGroupedByCompany() {
  try {
    const res = await fetch("/api/drivers/list_for_statements");
    const data = await res.json();

    if (!data.success) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π:", data.error);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ hiring_company_name
    const grouped = {};
    data.drivers.forEach(d => {
      const comp = d.hiring_company_name || "‚Äî";
      if (!grouped[comp]) grouped[comp] = [];
      grouped[comp].push(d);
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    const sortedCompanies = Object.keys(grouped).sort();

    const container = document.getElementById("allDriversResults");
    container.innerHTML = "";

    // === –ú–∞—Å—Ç–µ—Ä-—á–µ–∫–±–æ–∫—Å ===
    const masterDiv = document.createElement("div");
    masterDiv.className = "mb-3";

    const masterId = "masterDriverCheckbox";
    const masterCb = document.createElement("input");
    masterCb.type = "checkbox";
    masterCb.className = "form-check-input me-2";
    masterCb.id = masterId;
    masterCb.checked = true;

    const masterLabel = document.createElement("label");
    masterLabel.className = "form-check-label fw-bold";
    masterLabel.setAttribute("for", masterId);
    masterLabel.textContent = "–í—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π";

    masterDiv.appendChild(masterCb);
    masterDiv.appendChild(masterLabel);
    container.appendChild(masterDiv);

    masterCb.addEventListener("change", () => {
      const allDriverCbs = container.querySelectorAll(".driver-select");
      allDriverCbs.forEach(cb => {
        cb.checked = masterCb.checked;
      });
    });

    // === –°–ø–∏—Å–∫–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º ===
    sortedCompanies.forEach(companyName => {
      const drivers = grouped[companyName].sort((a, b) => a.name.localeCompare(b.name));

      // –ë–ª–æ–∫ –∫–æ–º–ø–∞–Ω–∏–∏
      const companyBlock = document.createElement("div");
      companyBlock.className = "mb-3";

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–∞–Ω–∏–∏
      const header = document.createElement("h5");
      header.textContent = companyName;
      companyBlock.appendChild(header);

      // –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
      const ul = document.createElement("ul");
      ul.className = "list-unstyled";

      drivers.forEach(d => {
        const li = document.createElement("li");
        li.className = "mb-1";

        const cbId = `drv_${d.id}`;

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.className = "form-check-input me-2 driver-select";
        checkbox.id = cbId;
        checkbox.checked = true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã
        checkbox.dataset.driverId = d.id;

        const label = document.createElement("label");
        label.className = "form-check-label";
        label.setAttribute("for", cbId);

        // –°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º, —Ç—Ä–∞–∫–æ–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
        const truckStr = d.truck_number ? ` ‚Ä¢ Truck: ${d.truck_number}` : "";
        const dispStr = d.dispatcher_name ? ` ‚Ä¢ Dispatcher: ${d.dispatcher_name}` : "";

        label.textContent = `${d.name}${truckStr}${dispStr}`;

        li.appendChild(checkbox);
        li.appendChild(label);
        ul.appendChild(li);
      });

      companyBlock.appendChild(ul);
      container.appendChild(companyBlock);
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π:", err);
  }
}



// üìÖ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –∏–∑ –º–æ–¥–∞–ª–∫–∏ "All Drivers"
function getSelectedDriversFromModal() {
  const container = document.getElementById("allDriversResults");
  const cbs = container.querySelectorAll(".driver-select");
  return Array.from(cbs)
    .filter(cb => cb.checked)
    .map(cb => cb.dataset.driverId);
}

// üîÅ —É—Ç–∏–ª–∏—Ç–∞: –∑–∞–ø—Ä–æ—Å JSON
async function apiGet(url) {
  const r = await fetch(url);
  if (!r.ok) throw new Error(`GET ${url} -> ${r.status}`);
  return await r.json();
}

// üë§ –≤—ã—Ç—è–Ω—É—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é (5 –∑–∞–ø—Ä–æ—Å–æ–≤)
// üë§ –≤—ã—Ç—è–Ω—É—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é (5 –∑–∞–ø—Ä–æ—Å–æ–≤) + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
async function fetchAllForDriver(driverId, weekRange) {
  const [start, end] = weekRange.split("-").map(s => s.trim());

  const [
    loadsRes,
    fuelRes,
    schemeRes,
    inspRes,
    expRes
  ] = await Promise.all([
    apiGet(`/api/driver_statement_loads?driver_id=${driverId}&week_range=${encodeURIComponent(weekRange)}`),
    apiGet(`/api/driver_fuel_summary?driver_id=${driverId}&week_range=${encodeURIComponent(weekRange)}`),
    apiGet(`/api/driver_commission_scheme?driver_id=${driverId}&week_range=${encodeURIComponent(weekRange)}`),
    apiGet(`/api/driver_inspections_by_range?driver_id=${driverId}&start_date=${start}&end_date=${end}`),
    apiGet(`/api/driver_expenses_by_range?driver_id=${driverId}&start_date=${start}&end_date=${end}`)
  ]);

  // 1) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
  const loads = (loadsRes.success ? loadsRes.loads : []);
  const fuel  = (fuelRes.success ? fuelRes.fuel : { qty:0, retail:0, invoice:0, cards:[] });
  const scheme = (schemeRes.success ? {
    scheme_type: schemeRes.scheme_type,
    commission_table: schemeRes.commission_table || [],
    deductions: schemeRes.deductions || [],
    enable_inspection_bonus: !!schemeRes.enable_inspection_bonus,
    bonus_level_1: schemeRes.bonus_level_1 || 0,
    bonus_level_2: schemeRes.bonus_level_2 || 0,
    bonus_level_3: schemeRes.bonus_level_3 || 0
  } : null);
  const inspections = (inspRes.success ? inspRes.inspections : []);

  // –ò–Ω–≤–æ–π—Å—ã: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî action: "keep", removed: false, amount –∫–∞–∫ –≤ –±–∞–∑–µ
  const expenses = (expRes.success ? expRes.expenses : []).map(e => ({
    _id: e._id,
    amount: Number(e.amount || 0),
    category: e.category || "",
    note: e.note || "",
    date: e.date || "",
    photo_id: e.photo_id || null,
    action: "keep",     // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"
    removed: false      // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á—ë–Ω –≤ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç
  }));

  // 2) –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª)
  const loadsGross = loads.reduce((sum, ld) => sum + Number(ld.price || 0), 0);

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç –∏–Ω–≤–æ–π—Å–æ–≤: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (keep) ‚Äî –Ω—É–ª–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  let grossAdd = 0;     // add_gross
  let grossDeduct = 0;  // deduct_gross
  let salaryAdd = 0;    // add_salary
  let salaryDeduct = 0; // deduct_salary

  for (const exp of expenses) {
    if (exp.removed) continue; // –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å —Ñ–ª–∞–≥ ‚Äî —É—á—Ç—ë—Ç—Å—è
    const amt = Number(exp.amount || 0);
    switch (exp.action) {
      case "add_gross":     grossAdd += amt; break;
      case "deduct_gross":  grossDeduct += amt; break;
      case "add_salary":    salaryAdd += amt; break;
      case "deduct_salary": salaryDeduct += amt; break;
      case "keep":
      default: break;
    }
  }

  const grossForCommission = loadsGross + grossAdd - grossDeduct;

  // –ö–æ–º–∏—Å—Å–∏—è
  let commission = 0;
  if (scheme && scheme.scheme_type === "percent") {
    const table = scheme.commission_table || [];
    if (table.length === 1) {
      commission = grossForCommission * (Number(table[0].percent || 0) / 100);
    } else if (table.length > 1) {
      const matched = table
        .filter(row => grossForCommission >= Number(row.from_sum || 0))
        .sort((a, b) => Number(b.from_sum || 0) - Number(a.from_sum || 0))[0];
      if (matched) {
        commission = grossForCommission * (Number(matched.percent || 0) / 100);
      }
    }
  }

  // –í—ã—á–µ—Ç—ã –ø–æ —Å—Ö–µ–º–µ
  const schemeDeductions = (scheme?.deductions || []);
  const schemeDeductionsTotal = schemeDeductions.reduce((s, d) => s + Number(d.amount || 0), 0);

  // –ò—Ç–æ–≥ –∫ –≤—ã–ø–ª–∞—Ç–µ
  const finalSalary = commission - schemeDeductionsTotal - salaryDeduct + salaryAdd;

  // 3) –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—á—ë—Ç–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const calc = {
    loads_gross: Number(loadsGross.toFixed(2)),
    gross_add_from_expenses: Number(grossAdd.toFixed(2)),
    gross_deduct_from_expenses: Number(grossDeduct.toFixed(2)),
    gross_for_commission: Number(grossForCommission.toFixed(2)),
    commission: Number(commission.toFixed(2)),
    scheme_deductions_total: Number(schemeDeductionsTotal.toFixed(2)),
    salary_add_from_expenses: Number(salaryAdd.toFixed(2)),
    salary_deduct_from_expenses: Number(salaryDeduct.toFixed(2)),
    final_salary: Number(finalSalary.toFixed(2))
  };

  return {
    driver_id: driverId,
    week_range: weekRange,
    loads,
    fuel,
    scheme,
    inspections,
    // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å—ã —É–∂–µ —Å action/removed/amount
    expenses,
    // –ò —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞
    calc
  };
}

// ‚ñ∂Ô∏è –≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ–º"
async function calculateAllDriversStatements() {
  const weekRange = document.getElementById("allDriversWeekRangeSelect").value;
  if (!weekRange) {
    Swal.fire("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é.", "warning");
    return;
  }

  const driverIds = getSelectedDriversFromModal();
  if (!driverIds.length) {
    Swal.fire("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è.", "warning");
    return;
  }

  const out = document.getElementById("allDriversResults");
  const progressId = "bulkProgress";
  const existing = document.getElementById(progressId);
  if (existing) existing.remove();

  const progress = document.createElement("div");
  progress.id = progressId;
  progress.className = "mt-3";
  progress.innerHTML = `<p><strong>–°—Ç–∞—Ä—Ç —Ä–∞—Å—á—ë—Ç–∞ (${driverIds.length} –≤–æ–¥–∏—Ç–µ–ª–µ–π)...</strong></p>`;
  out.prepend(progress);

  const results = [];
  let done = 0;

  // –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∞–ª–∏—Ç—å –±—ç–∫–µ–Ω–¥
  for (const driverId of driverIds) {
    try {
      const data = await fetchAllForDriver(driverId, weekRange);
      results.push(data);
      done += 1;
      progress.innerHTML = `<p><strong>–ì–æ—Ç–æ–≤–æ ${done}/${driverIds.length}</strong></p>`;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é", driverId, e);
      done += 1;
      progress.innerHTML = `<p><strong>–ì–æ—Ç–æ–≤–æ ${done}/${driverIds.length} (—Å –æ—à–∏–±–∫–∞–º–∏)</strong></p>`;
    }
  }

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—á–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  try {
    const r = await fetch("/api/statements/bulk_save", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        week_range: weekRange,
        items: results
      })
    });
    const resp = await r.json();

    if (!resp.success) {
      console.warn("Bulk save error:", resp.error);
      progress.insertAdjacentHTML(
        "beforeend",
        `<p class="text-danger">–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${resp.error || "unknown"}</p>`
      );
      Swal.fire("–û—à–∏–±–∫–∞", resp.error || "Bulk save failed", "error");
      return;
    }

    // –æ–∂–∏–¥–∞–µ–º –æ—Ç –±—ç–∫–∞: { success: true, added, ignored, replaced }
    const { added = 0, ignored = 0, replaced = 0 } = resp;

    progress.insertAdjacentHTML(
      "beforeend",
      `<p class="text-success">–î–æ–±–∞–≤–ª–µ–Ω–æ: ${added} ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ: ${replaced} ‚Ä¢ –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${ignored}</p>`
    );

    await Swal.fire({
      icon: "success",
      title: "–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω",
      html: `
        <div style="text-align:left">
          <div><b>–ù–µ–¥–µ–ª—è:</b> ${weekRange}</div>
          <div style="margin-top:8px">
            <span style="color:#16a34a"><b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> ${added}</span><br>
            <span style="color:#ca8a04"><b>–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ:</b> ${replaced}</span><br>
            <span style="color:#6b7280"><b>–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (approved):</b> ${ignored}</span>
          </div>
          <div style="margin-top:8px"><b>–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> ${results.length}</div>
        </div>
      `,
      confirmButtonText: "–û–∫"
    });
  } catch (e) {
    console.error("Bulk save request error:", e);
    progress.insertAdjacentHTML(
      "beforeend",
      `<p class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</p>`
    );
    Swal.fire("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", "error");
  }
}



async function loadDriverStatements() {
  const weekRange = document.getElementById("statementWeekRangeSelect").value || "";
  const container = document.getElementById("driverStatementsContainer");

  container.innerHTML = `<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>`;

  let url = `/api/statements/list`;
  if (weekRange) {
    url += `?week_range=${encodeURIComponent(weekRange)}`;
  }

  const fmtMoney = (n) => `$${Number(n || 0).toFixed(2)}`;
  const debounce = (fn, ms = 200) => {
    let t;
    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
  };

  try {
    const res = await fetch(url);
    const data = await res.json();

    if (!data.success) {
      container.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞: ${data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–æ–≤"}</p>`;
      return;
    }

    if (!data.items || data.items.length === 0) {
      container.innerHTML = `<p>–°—Ç–µ–π—Ç–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>`;
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
    const items = [...data.items].sort((a, b) => {
      const aComp = (a.hiring_company_name || "").toString();
      const bComp = (b.hiring_company_name || "").toString();
      const byCompany = aComp.localeCompare(bComp, undefined, { sensitivity: "base" });
      if (byCompany !== 0) return byCompany;
      const aDrv = (a.driver_name || "").toString();
      const bDrv = (b.driver_name || "").toString();
      return aDrv.localeCompare(bDrv, undefined, { sensitivity: "base" });
    });

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞
    const companies = Array.from(new Set(items.map(x => x.hiring_company_name || "‚Äî")))
      .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }));

    // ‚Äî‚Äî‚Äî –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–∏–ª—å—Ç—Ä-–±–ª–æ–∫ ‚Äî‚Äî‚Äî
    const filterBar = `
      <div class="card border-0 shadow-sm rounded-3 mb-3">
        <div class="card-body py-3">
          <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-2">
            <div class="d-flex align-items-center gap-2">
              <span class="fw-semibold">–§–∏–ª—å—Ç—Ä—ã</span>
              <span class="badge bg-light text-secondary border">–ù–µ–¥–µ–ª—è: ${weekRange || "‚Äî"}</span>
            </div>
            <button type="button" class="btn btn-sm btn-outline-secondary" id="stmtFiltersReset">–°–±—Ä–æ—Å–∏—Ç—å</button>
          </div>

          <div class="row g-3">
            <div class="col-md-4">
              <label for="stmtFilterDriver" class="form-label mb-1">–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è</label>
              <div class="input-group input-group-sm">
                <span class="input-group-text">üîé</span>
                <input type="text" id="stmtFilterDriver" class="form-control" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: John">
              </div>
            </div>

            <div class="col-md-4">
              <label for="stmtFilterCompany" class="form-label mb-1">–ö–æ–º–ø–∞–Ω–∏—è</label>
              <select id="stmtFilterCompany" class="form-select form-select-sm">
                <option value="">–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏</option>
                ${companies.map(c => `<option value="${c}">${c}</option>`).join("")}
              </select>
            </div>

            <div class="col-md-4">
              <label class="form-label mb-1 d-block">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</label>
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="stmtFilterActiveOnly">
                <label class="form-check-label" for="stmtFilterActiveOnly">
                  –ü–æ–∫–∞–∑–∞—Ç—å –≥–¥–µ Monday Loads / Invoices / Inspections ‚â• 1
                </label>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    const tableShell = `
      <div class="table-responsive">
        <table class="table table-sm table-bordered align-middle" id="statementsTable">
          <thead class="table-light">
            <tr>
              <th class="text-center" style="width:36px">
                <input type="checkbox" class="form-check-input" id="stmtMasterCb">
              </th>
              <th>Status</th>
              <th>Week</th>
              <th>Driver</th>
              <th>Company</th>
              <th>Truck</th>
              <th class="text-end">Monday Loads</th>
              <th class="text-end">Invoices</th>
              <th class="text-end">Inspections</th>
              <th class="text-end">Salary</th>
              <th class="text-nowrap">Actions</th>
            </tr>
          </thead>
          <tbody id="statementsTbody"></tbody>
        </table>
      </div>
      <div class="mt-2 text-muted d-flex justify-content-between">
        <div>–í—Å–µ–≥–æ: <span id="stmtSummaryCount">0</span></div>
        <div><strong>–°—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç:</strong> <span id="stmtSummaryTotal">$0.00</span></div>
      </div>
    `;

    container.innerHTML = filterBar + tableShell;

    const tbody = container.querySelector("#statementsTbody");
    const master = container.querySelector("#stmtMasterCb");
    const sumCountEl = container.querySelector("#stmtSummaryCount");
    const sumTotalEl = container.querySelector("#stmtSummaryTotal");

    // –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const buildRow = (it) => {
      const approvedBadge = it.approved
        ? `<span class="badge bg-success">Approved</span>`
        : `<span class="badge bg-secondary">Pending</span>`;

      const anyPositive =
        Number(it.monday_loads) > 0 ||
        Number(it.invoices_num) > 0 ||
        Number(it.inspections_num) > 0;

      let rowClass = "";
      if (it.approved) {
        rowClass = "table-success";           // approved -> –∑–µ–ª—ë–Ω—ã–π
      } else {
        rowClass = anyPositive ? "table-danger" : "table-warning"; // pending -> –∫—Ä–∞—Å–Ω—ã–π/–∂–µ–ª—Ç—ã–π
      }

      const confirmDisabled = it.approved ? "disabled" : "";

      return `
        <tr class="${rowClass}" data-id="${it._id}">
          <td class="text-center" style="width:36px">
            <input type="checkbox" class="form-check-input stmt-cb" data-id="${it._id}">
          </td>
          <td class="status-cell">${approvedBadge}</td>
          <td>${it.week_range || "‚Äî"}</td>
          <td>${it.driver_name || "‚Äî"}</td>
          <td>${it.hiring_company_name || "‚Äî"}</td>
          <td>${it.truck_number || "‚Äî"}</td>
          <td class="text-end">${it.monday_loads}</td>
          <td class="text-end">${it.invoices_num}</td>
          <td class="text-end">${it.inspections_num}</td>
          <td class="text-end fw-semibold">${fmtMoney(it.salary)}</td>
          <td class="text-nowrap" style="width:180px">
            <button type="button" class="btn btn-sm btn-primary btn-stmt-confirm" data-id="${it._id}" ${confirmDisabled}>Confirm</button>
            <button type="button" class="btn btn-sm btn-outline-secondary ms-1 btn-stmt-review" data-id="${it._id}">Review</button>
          </td>
        </tr>
      `;
    };

    // –†–µ–Ω–¥–µ—Ä –ø–æ –º–∞—Å—Å–∏–≤—É + —Å–≤–æ–¥–∫–∞
    const renderRows = (arr) => {
      tbody.innerHTML = arr.map(buildRow).join("");
      sumCountEl.textContent = arr.length;
      const totalSalary = arr.reduce((s, it) => s + (Number(it.salary) || 0), 0);
      sumTotalEl.textContent = fmtMoney(totalSalary);
      if (master) master.checked = false; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    const driverInput   = container.querySelector("#stmtFilterDriver");
    const companySelect = container.querySelector("#stmtFilterCompany");
    const activeOnlyCb  = container.querySelector("#stmtFilterActiveOnly");
    const resetBtn      = container.querySelector("#stmtFiltersReset");

    const applyFilters = () => {
      const q = (driverInput.value || "").trim().toLowerCase();
      const company = companySelect.value || "";
      const activeOnly = activeOnlyCb.checked;

      const filtered = items.filter(it => {
        if (q && !(it.driver_name || "").toLowerCase().includes(q)) return false;
        if (company && (it.hiring_company_name || "") !== company) return false;
        if (activeOnly) {
          const anyPos =
            Number(it.monday_loads) > 0 ||
            Number(it.invoices_num) > 0 ||
            Number(it.inspections_num) > 0;
          if (!anyPos) return false;
        }
        return true;
      });

      renderRows(filtered);
    };

    // –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    renderRows(items);

    // –°–ª—É—à–∞—Ç–µ–ª–∏
    driverInput.addEventListener("input", debounce(applyFilters, 200));
    companySelect.addEventListener("change", applyFilters);
    activeOnlyCb.addEventListener("change", applyFilters);
    resetBtn.addEventListener("click", () => {
      driverInput.value = "";
      companySelect.value = "";
      activeOnlyCb.checked = false;
      applyFilters();
      driverInput.focus();
    });

    // –ú–∞—Å—Ç–µ—Ä-—á–µ–∫–±–æ–∫—Å (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤–∏–¥–∏–º—ã–º —Å—Ç—Ä–æ–∫–∞–º)
    if (master) {
      master.addEventListener("change", () => {
        tbody.querySelectorAll(".stmt-cb").forEach(cb => {
          cb.checked = master.checked;
        });
      });
    }

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π: Confirm / Review
    const table = container.querySelector("#statementsTable");
    table.addEventListener("click", async (e) => {
      const confirmBtn = e.target.closest(".btn-stmt-confirm");
      const reviewBtn  = e.target.closest(".btn-stmt-review");
      if (!confirmBtn && !reviewBtn) return;

      const row = e.target.closest("tr[data-id]");
      const id = row?.getAttribute("data-id");
      if (!id) return;

      // –ò—â–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ id –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
      const item = items.find(x => x._id === id);
      if (!item) return;

      if (reviewBtn) {
        if (typeof Swal !== "undefined") {
          await Swal.fire({
            title: "Statement Review",
            html: `
              <div style="text-align:left">
                <div><b>Driver:</b> ${item.driver_name || "‚Äî"}</div>
                <div><b>Company:</b> ${item.hiring_company_name || "‚Äî"}</div>
                <div><b>Week:</b> ${item.week_range || "‚Äî"}</div>
                <div><b>Truck:</b> ${item.truck_number || "‚Äî"}</div>
                <hr>
                <div><b>Monday Loads:</b> ${item.monday_loads ?? 0}</div>
                <div><b>Invoices:</b> ${item.invoices_num ?? 0}</div>
                <div><b>Inspections:</b> ${item.inspections_num ?? 0}</div>
                <div><b>Salary:</b> ${fmtMoney(item.salary)}</div>
                <hr>
                <div><b>Status:</b> ${item.approved ? "Approved" : "Pending"}</div>
              </div>
            `,
            confirmButtonText: "OK"
          });
        } else {
          alert(
            `Driver: ${item.driver_name || "‚Äî"}\n` +
            `Company: ${item.hiring_company_name || "‚Äî"}\n` +
            `Week: ${item.week_range || "‚Äî"}\n` +
            `Truck: ${item.truck_number || "‚Äî"}\n` +
            `Monday Loads: ${item.monday_loads ?? 0}\n` +
            `Invoices: ${item.invoices_num ?? 0}\n` +
            `Inspections: ${item.inspections_num ?? 0}\n` +
            `Salary: ${fmtMoney(item.salary)}\n` +
            `Status: ${item.approved ? "Approved" : "Pending"}`
          );
        }
        return;
      }

      if (confirmBtn) {
        try {
          confirmBtn.disabled = true;
          confirmBtn.innerText = "Confirming...";

          const r = await fetch("/api/statements/confirm", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id })
          });
          const resp = await r.json();

          if (!resp.success) {
            throw new Error(resp.error || "Confirm failed");
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏ UI
          item.approved = true;

          const badge = row.querySelector(".status-cell .badge");
          if (badge) {
            badge.classList.remove("bg-secondary");
            badge.classList.add("bg-success");
            badge.textContent = "Approved";
          }
          row.classList.remove("table-warning", "table-danger");
          row.classList.add("table-success");
          confirmBtn.innerText = "Confirmed";
        } catch (err) {
          console.error("Confirm error:", err);
          if (typeof Swal !== "undefined") {
            Swal.fire("–û—à–∏–±–∫–∞", err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–µ–π—Ç–º–µ–Ω—Ç.", "error");
          } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–µ–π—Ç–º–µ–Ω—Ç.");
          }
          confirmBtn.disabled = false;
          confirmBtn.innerText = "Confirm";
        }
      }
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–æ–≤:", err);
    container.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–æ–≤</p>`;
  }
}




// === –ù–∏–∂–µ –≤–∞–∂–Ω—ã–π –±–ª–æ–∫ –Ω—É–∂–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ review ===



// === helper: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω—É–∂–Ω—ã–π weekRange –µ—Å—Ç—å –≤ select ===
function ensureWeekRangeOption(selectEl, weekRange) {
  if (!selectEl) return;
  const exists = Array.from(selectEl.options).some(o => o.value === weekRange);
  if (!exists && weekRange) {
    const opt = document.createElement("option");
    opt.value = weekRange;
    opt.textContent = weekRange;
    selectEl.appendChild(opt);
  }
}

// === –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –≤ —Ä–µ–∂–∏–º–µ REVIEW –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–∞ ===
async function openStatementReviewModal(item) {
  // –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –∏ —Ñ–æ–Ω
  const modal = document.getElementById("driverStatementModal");
  const backdrop = document.getElementById("driverStatementBackdrop");
  modal.classList.add("show");
  backdrop.classList.add("show");

  // –ø–æ–º–µ—Ç–∏–º —Ä–µ–∂–∏–º
  modal.dataset.mode = "review";
  modal.dataset.statementId = item._id || "";

  // —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∫–∏
  const title = modal.querySelector(".modal-title");
  const driverLabel = modal.querySelector('label[for="driverSelect"]');
  const driverSel = modal.querySelector("#driverSelect");
  const weekLabel = modal.querySelector('label[for="driverWeekRangeSelect"]');
  const weekSel = modal.querySelector("#driverWeekRangeSelect");
  const calcBtn = modal.querySelector('button[onclick="calculateDriverStatement()"]');
  const saveBtn = modal.querySelector('button[onclick="saveDriverStatement()"]');
  const results = modal.querySelector("#driverStatementResults");

  // –∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (title) title.textContent = "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–∞";

  // —Å–ø—Ä—è—á–µ–º –≤—ã–±–æ—Ä—ã –∏ –∫–Ω–æ–ø–∫—É —Ä–∞—Å—á—ë—Ç–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  [driverLabel, driverSel, weekLabel, weekSel].forEach(el => { if (el) el.style.display = "none"; });
  if (calcBtn) calcBtn.style.display = "none";
  if (saveBtn) saveBtn.style.display = "none";

  // –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É Confirm (–µ—Å–ª–∏ –Ω–µ—Ç)
  let confirmWrap = modal.querySelector("#reviewConfirmWrap");
  if (!confirmWrap) {
    confirmWrap = document.createElement("div");
    confirmWrap.id = "reviewConfirmWrap";
    confirmWrap.className = "mt-3 d-flex gap-2";
    confirmWrap.innerHTML = `
      <button type="button" class="btn btn-success" id="reviewConfirmBtn">Confirm</button>
      <button type="button" class="btn btn-outline-secondary" id="reviewCloseBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    // –≤—Å—Ç–∞–≤–∏–º –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results.parentElement.insertBefore(confirmWrap, results.nextSibling);
  } else {
    confirmWrap.style.display = "";
  }

  // –∑–∞–ø–æ–ª–Ω–∏–º —Å–µ–ª–µ–∫—Ç—ã –Ω—É–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ "–∫–∞–∫ –±—É–¥—Ç–æ –≤—ã–±—Ä–∞–Ω—ã"
  // (weekRange –¥–æ–±–∞–≤–∏–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ)
  try { generateWeekRanges("driverWeekRangeSelect"); } catch (e) { /* –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–∫ */ }
  ensureWeekRangeOption(weekSel, item.week_range);
  if (driverSel) driverSel.value = item.driver_id || "";
  if (weekSel) weekSel.value = item.week_range || "";

  // –ø–æ—Å—á–∏—Ç–∞–µ–º —Å—Ä–∞–∑—É
  results.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>";
  await calculateDriverStatement();

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  const confirmBtn = modal.querySelector("#reviewConfirmBtn");
  const closeBtn = modal.querySelector("#reviewCloseBtn");

  confirmBtn.onclick = async () => {
    try {
      confirmBtn.disabled = true;
      confirmBtn.textContent = "Confirming...";

      const r = await fetch("/api/statements/confirm", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: modal.dataset.statementId })
      });
      const resp = await r.json();
      if (!resp.success) throw new Error(resp.error || "Confirm failed");

      // —É—Å–ø–µ—Ö ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
      closeDriverStatementModal();
      if (typeof loadDriverStatements === "function") {
        await loadDriverStatements();
      }
    } catch (err) {
      console.error("Confirm error:", err);
      if (typeof Swal !== "undefined") {
        Swal.fire("–û—à–∏–±–∫–∞", err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–µ–π—Ç–º–µ–Ω—Ç.", "error");
      } else {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–µ–π—Ç–º–µ–Ω—Ç.");
      }
      confirmBtn.disabled = false;
      confirmBtn.textContent = "Confirm";
    }
  };

  closeBtn.onclick = () => closeDriverStatementModal();
}

// === –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ: —á–∏—Å—Ç–∏–º —Ä–µ–∂–∏–º REVIEW –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å ===
function closeDriverStatementModal() {
  const modal = document.getElementById("driverStatementModal");
  const backdrop = document.getElementById("driverStatementBackdrop");
  if (!modal) return;

  // —Å–Ω—è—Ç—å show
  modal.classList.remove("show");
  backdrop.classList.remove("show");

  // –µ—Å–ª–∏ –±—ã–ª —Ä–µ–∂–∏–º review ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –∫–∞–∫ –±—ã–ª–æ
  if (modal.dataset.mode === "review") {
    const title = modal.querySelector(".modal-title");
    if (title) title.textContent = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è";

    const driverLabel = modal.querySelector('label[for="driverSelect"]');
    const driverSel = modal.querySelector("#driverSelect");
    const weekLabel = modal.querySelector('label[for="driverWeekRangeSelect"]');
    const weekSel = modal.querySelector("#driverWeekRangeSelect");
    const calcBtn = modal.querySelector('button[onclick="calculateDriverStatement()"]');
    const saveBtn = modal.querySelector('button[onclick="saveDriverStatement()"]');
    const reviewWrap = modal.querySelector("#reviewConfirmWrap");
    const results = modal.querySelector("#driverStatementResults");

    [driverLabel, driverSel, weekLabel, weekSel].forEach(el => { if (el) el.style.display = ""; });
    if (calcBtn) calcBtn.style.display = "";
    if (saveBtn) saveBtn.style.display = "";
    if (reviewWrap) reviewWrap.style.display = "none";
    if (results) results.innerHTML = ""; // —á–∏—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç

    delete modal.dataset.mode;
    delete modal.dataset.statementId;
  }
}

// === –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: Review –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –≤ —Ä–µ–∂–∏–º–µ REVIEW ===
async function loadDriverStatements() {
  const weekRange = document.getElementById("statementWeekRangeSelect").value || "";
  const container = document.getElementById("driverStatementsContainer");

  container.innerHTML = `<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>`;

  let url = `/api/statements/list`;
  if (weekRange) {
    url += `?week_range=${encodeURIComponent(weekRange)}`;
  }

  const fmtMoney = (n) => `$${Number(n || 0).toFixed(2)}`;
  const debounce = (fn, ms = 200) => { let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; };

  try {
    const res = await fetch(url);
    const data = await res.json();

    if (!data.success) {
      container.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞: ${data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–æ–≤"}</p>`;
      return;
    }
    if (!data.items || data.items.length === 0) {
      container.innerHTML = `<p>–°—Ç–µ–π—Ç–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>`;
      return;
    }

    // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
    const items = [...data.items].sort((a,b)=>{
      const c = (a.hiring_company_name||"").localeCompare(b.hiring_company_name||"", undefined, {sensitivity:"base"});
      if (c!==0) return c;
      return (a.driver_name||"").localeCompare(b.driver_name||"", undefined, {sensitivity:"base"});
    });

    const companies = Array.from(new Set(items.map(x => x.hiring_company_name || "‚Äî")))
      .sort((a,b)=>a.localeCompare(b,undefined,{sensitivity:"base"}));

    const filterBar = `
      <div class="card border-0 shadow-sm rounded-3 mb-3">
        <div class="card-body py-3">
          <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-2">
            <div class="d-flex align-items-center gap-2">
              <span class="fw-semibold">–§–∏–ª—å—Ç—Ä—ã</span>
              <span class="badge bg-light text-secondary border">–ù–µ–¥–µ–ª—è: ${weekRange || "‚Äî"}</span>
            </div>
            <button type="button" class="btn btn-sm btn-outline-secondary" id="stmtFiltersReset">–°–±—Ä–æ—Å–∏—Ç—å</button>
          </div>

          <div class="row g-3">
            <div class="col-md-4">
              <label for="stmtFilterDriver" class="form-label mb-1">–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è</label>
              <div class="input-group input-group-sm">
                <span class="input-group-text">üîé</span>
                <input type="text" id="stmtFilterDriver" class="form-control" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: John">
              </div>
            </div>

            <div class="col-md-4">
              <label for="stmtFilterCompany" class="form-label mb-1">–ö–æ–º–ø–∞–Ω–∏—è</label>
              <select id="stmtFilterCompany" class="form-select form-select-sm">
                <option value="">–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏</option>
                ${companies.map(c => `<option value="${c}">${c}</option>`).join("")}
              </select>
            </div>

            <div class="col-md-4">
              <label class="form-label mb-1 d-block">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</label>
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="stmtFilterActiveOnly">
                <label class="form-check-label" for="stmtFilterActiveOnly">
                  –ü–æ–∫–∞–∑–∞—Ç—å –≥–¥–µ Monday Loads / Invoices / Inspections ‚â• 1
                </label>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    const tableShell = `
      <div class="table-responsive">
        <table class="table table-sm table-bordered align-middle" id="statementsTable">
          <thead class="table-light">
            <tr>
              <th class="text-center" style="width:36px">
                <input type="checkbox" class="form-check-input" id="stmtMasterCb">
              </th>
              <th>Status</th>
              <th>Week</th>
              <th>Driver</th>
              <th>Company</th>
              <th>Truck</th>
              <th class="text-end">Monday Loads</th>
              <th class="text-end">Invoices</th>
              <th class="text-end">Inspections</th>
              <th class="text-end">Salary</th>
              <th class="text-nowrap">Actions</th>
            </tr>
          </thead>
          <tbody id="statementsTbody"></tbody>
        </table>
      </div>
      <div class="mt-2 text-muted d-flex justify-content-between">
        <div>–í—Å–µ–≥–æ: <span id="stmtSummaryCount">0</span></div>
        <div><strong>–°—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç:</strong> <span id="stmtSummaryTotal">$0.00</span></div>
      </div>
    `;

    container.innerHTML = filterBar + tableShell;

    const tbody = container.querySelector("#statementsTbody");
    const master = container.querySelector("#stmtMasterCb");
    const sumCountEl = container.querySelector("#stmtSummaryCount");
    const sumTotalEl = container.querySelector("#stmtSummaryTotal");

    const buildRow = (it) => {
      const approvedBadge = it.approved
        ? `<span class="badge bg-success">Approved</span>`
        : `<span class="badge bg-secondary">Pending</span>`;
      const anyPositive = Number(it.monday_loads)>0 || Number(it.invoices_num)>0 || Number(it.inspections_num)>0;
      const rowClass = it.approved ? "table-success" : (anyPositive ? "table-danger" : "table-warning");
      const confirmDisabled = it.approved ? "disabled" : "";

      return `
        <tr class="${rowClass}" data-id="${it._id}">
          <td class="text-center" style="width:36px">
            <input type="checkbox" class="form-check-input stmt-cb" data-id="${it._id}">
          </td>
          <td class="status-cell">${approvedBadge}</td>
          <td>${it.week_range || "‚Äî"}</td>
          <td>${it.driver_name || "‚Äî"}</td>
          <td>${it.hiring_company_name || "‚Äî"}</td>
          <td>${it.truck_number || "‚Äî"}</td>
          <td class="text-end">${it.monday_loads}</td>
          <td class="text-end">${it.invoices_num}</td>
          <td class="text-end">${it.inspections_num}</td>
          <td class="text-end fw-semibold">${fmtMoney(it.salary)}</td>
          <td class="text-nowrap" style="width:180px">
            <button type="button" class="btn btn-sm btn-primary btn-stmt-confirm" data-id="${it._id}" ${confirmDisabled}>Confirm</button>
            <button type="button" class="btn btn-sm btn-outline-secondary ms-1 btn-stmt-review" data-id="${it._id}">Review</button>
          </td>
        </tr>
      `;
    };

    const renderRows = (arr) => {
      tbody.innerHTML = arr.map(buildRow).join("");
      sumCountEl.textContent = arr.length;
      const totalSalary = arr.reduce((s, x) => s + (Number(x.salary)||0), 0);
      sumTotalEl.textContent = fmtMoney(totalSalary);
      if (master) master.checked = false;
    };

    // —Ñ–∏–ª—å—Ç—Ä—ã
    const driverInput   = container.querySelector("#stmtFilterDriver");
    const companySelect = container.querySelector("#stmtFilterCompany");
    const activeOnlyCb  = container.querySelector("#stmtFilterActiveOnly");
    const resetBtn      = container.querySelector("#stmtFiltersReset");

    const applyFilters = () => {
      const q = (driverInput.value||"").trim().toLowerCase();
      const comp = companySelect.value||"";
      const activeOnly = activeOnlyCb.checked;

      const filtered = items.filter(it => {
        if (q && !(it.driver_name||"").toLowerCase().includes(q)) return false;
        if (comp && (it.hiring_company_name||"") !== comp) return false;
        if (activeOnly) {
          const anyPos = Number(it.monday_loads)>0 || Number(it.invoices_num)>0 || Number(it.inspections_num)>0;
          if (!anyPos) return false;
        }
        return true;
      });

      renderRows(filtered);
    };

    renderRows(items);

    driverInput.addEventListener("input", debounce(applyFilters, 200));
    companySelect.addEventListener("change", applyFilters);
    activeOnlyCb.addEventListener("change", applyFilters);
    resetBtn.addEventListener("click", () => {
      driverInput.value = "";
      companySelect.value = "";
      activeOnlyCb.checked = false;
      applyFilters();
      driverInput.focus();
    });

    // –º–∞—Å—Ç–µ—Ä —á–µ–∫–±–æ–∫—Å
    if (master) {
      master.addEventListener("change", () => {
        tbody.querySelectorAll(".stmt-cb").forEach(cb => cb.checked = master.checked);
      });
    }

    // –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: Confirm / Review
    const table = container.querySelector("#statementsTable");
    table.addEventListener("click", async (e) => {
      const confirmBtn = e.target.closest(".btn-stmt-confirm");
      const reviewBtn  = e.target.closest(".btn-stmt-review");
      if (!confirmBtn && !reviewBtn) return;

      const row = e.target.closest("tr[data-id]");
      const id = row?.getAttribute("data-id");
      if (!id) return;

      const item = items.find(x => x._id === id);
      if (!item) return;

      if (reviewBtn) {
        // –æ—Ç–∫—Ä—ã—Ç—å —Ç—É –∂–µ –º–æ–¥–∞–ª–∫—É, –Ω–æ –≤ —Ä–µ–∂–∏–º–µ REVIEW
        return openStatementReviewModal(item);
      }

      if (confirmBtn) {
        try {
          confirmBtn.disabled = true;
          confirmBtn.textContent = "Confirming...";
          const r = await fetch("/api/statements/confirm", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id })
          });
          const resp = await r.json();
          if (!resp.success) throw new Error(resp.error || "Confirm failed");

          // –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É
          item.approved = true;
          const badge = row.querySelector(".status-cell .badge");
          if (badge) {
            badge.classList.remove("bg-secondary");
            badge.classList.add("bg-success");
            badge.textContent = "Approved";
          }
          row.classList.remove("table-warning", "table-danger");
          row.classList.add("table-success");
          confirmBtn.textContent = "Confirmed";
        } catch (err) {
          console.error(err);
          if (typeof Swal !== "undefined") Swal.fire("–û—à–∏–±–∫–∞", err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "error");
          confirmBtn.disabled = false;
          confirmBtn.textContent = "Confirm";
        }
      }
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–æ–≤:", err);
    container.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–µ–π—Ç–º–µ–Ω—Ç–æ–≤</p>`;
  }
}
