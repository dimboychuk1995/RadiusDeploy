# utils/notifications.py

import logging
import requests
from typing import Any, Dict, Optional, Sequence

EXPO_PUSH_URL = "https://exp.host/--/api/v2/push/send"

def _build_payload(
    token: str,
    title: str,
    body: str,
    data: Optional[Dict[str, Any]] = None,
    sound: str = "default",
    priority: str = "high",
    channel_id: Optional[str] = "default",  # Android notification channel
    ttl: Optional[int] = None,              # seconds to live (optional)
) -> Dict[str, Any]:
    payload: Dict[str, Any] = {
        "to": token,
        "title": title,
        "body": body,
        "sound": sound,
        "priority": priority,  # –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ Android
        "data": data or {},    # <-- —Å—é–¥–∞ –∫–ª–∞–¥—ë–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, load_id)
    }
    if channel_id:
        payload["channelId"] = channel_id   # Android –∫–∞–Ω–∞–ª (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –≤ RN)
    if ttl is not None:
        payload["ttl"] = ttl
    return payload


def send_push_notification(
    token: str,
    title: str,
    body: str,
    data: Optional[Dict[str, Any]] = None,
    sound: str = "default",
    priority: str = "high",
    channel_id: Optional[str] = "default",
    ttl: Optional[int] = None,
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Expo.

    :param token: Expo push token, –Ω–∞–ø—Ä–∏–º–µ—Ä 'ExponentPushToken[xxxxx]'
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
    :param body: –¢–µ–∫—Å—Ç
    :param data: –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–ø–æ–π–¥—ë—Ç –≤ notification.request.content.data –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    :param sound: 'default' | None
    :param priority: 'default' | 'normal' | 'high'
    :param channel_id: Android notification channel id (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'default')
    :param ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: JSON-–æ—Ç–≤–µ—Ç Expo (ticket)
    """
    logging.info("üì≤ –û—Ç–ø—Ä–∞–≤–∫–∞ PUSH‚Ä¶")
    logging.info("üîë Token: %s", token)
    logging.info("üìù Title: %s", title)
    logging.info("üìù Body: %s", body)
    if data:
        logging.info("üì¶ Data: %s", data)

    if not token or not token.startswith("ExponentPushToken"):
        raise ValueError("Invalid Expo push token")

    payload = _build_payload(token, title, body, data, sound, priority, channel_id, ttl)

    try:
        resp = requests.post(EXPO_PUSH_URL, json=payload, timeout=15)
        resp.raise_for_status()
        out = resp.json()
        logging.info("‚úÖ Push sent: %s | %s", resp.status_code, out)
        # Expo –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫–∏ —É—Ä–æ–≤–Ω—è ticket, –∏—Ö —Ç–æ–∂–µ –ª–æ–≥–∏—Ä—É–µ–º:
        if isinstance(out, dict) and "data" in out:
            items = out.get("data")
            # –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ dict
            if isinstance(items, dict) and items.get("status") != "ok":
                logging.warning("‚ö†Ô∏è Expo ticket not OK: %s", items)
        return out
    except requests.RequestException as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push: %s", e)
        raise


def send_push_notifications(
    tokens: Sequence[str],
    title: str,
    body: str,
    data: Optional[Dict[str, Any]] = None,
    sound: str = "default",
    priority: str = "high",
    channel_id: Optional[str] = "default",
    ttl: Optional[int] = None,
) -> Dict[str, Any]:
    """
    –ë–∞—Ç—á-–æ—Ç–ø—Ä–∞–≤–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º).
    –£–¥–æ–±–Ω–æ, –µ—Å–ª–∏ –Ω–∞–¥–æ —Å–ª–∞—Ç—å –æ–¥–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–ª–∏ –≥—Ä—É–ø–ø–µ.

    :return: JSON-–æ—Ç–≤–µ—Ç Expo (tickets list)
    """
    payload = [
        _build_payload(t, title, body, data, sound, priority, channel_id, ttl)
        for t in tokens
        if t and t.startswith("ExponentPushToken")
    ]
    if not payload:
        raise ValueError("No valid Expo tokens provided")

    try:
        resp = requests.post(EXPO_PUSH_URL, json=payload, timeout=20)
        resp.raise_for_status()
        out = resp.json()
        logging.info("‚úÖ Batch push sent: %s | %s", resp.status_code, out)
        return out
    except requests.RequestException as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á-–æ—Ç–ø—Ä–∞–≤–∫–∏ push: %s", e)
        raise