# updated_samsara.py
from flask import Blueprint, jsonify, request, abort
from flask_login import login_required, current_user
from bson import ObjectId
import requests

from tools.db import db

"""
–ö–æ—Å—Ç—è–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TMS ‚Üî Samsara –¥–ª—è –ª–∏–Ω–∫–æ–≤–∫–∏ —é–Ω–∏—Ç–æ–≤:
- GET  /api/samsara/vehicles                ‚Äî —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –∏–∑ Samsara (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏/–∏–Ω—Å–ø–µ–∫—Ü–∏–∏)
- POST /api/samsara/link_vehicle            ‚Äî —Å–≤—è–∑–∞—Ç—å –æ–¥–∏–Ω —é–Ω–∏—Ç TMS —Å –º–∞—à–∏–Ω–æ–π Samsara (–æ–±–Ω–æ–≤–ª—è–µ—Ç externalIds –≤ Samsara)
- POST /api/samsara/auto_match_by_vin       ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç—á –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ –ø–æ VIN
- GET  /api/samsara/reconcile_links         ‚Äî —Ä–µ–≤–∏–∑–∏—è —Å–≤—è–∑–æ–∫ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã/–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
"""

samsara_bp = Blueprint("samsara_updated", __name__)

BASE_URL = "https://api.samsara.com"
integrations_collection = db["integrations_settings"]
trucks_collection = db["trucks"]


def get_samsara_headers():
    """
    –î–æ—Å—Ç–∞—ë—Ç API-–∫–ª—é—á –∏–∑ integrations_settings: { name: "samsara", api_key: "..." }.
    """
    integration = integrations_collection.find_one({"name": "samsara"})
    if not integration or not integration.get("api_key"):
        abort(500, description="Samsara API key not configured")
    return {
        "Authorization": f"Bearer {integration['api_key']}",
        "accept": "application/json",
        "content-type": "application/json",
    }


# 1) –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –∏–∑ Samsara (VIN, plate, id) ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
@samsara_bp.route("/api/samsara/vehicles", methods=["GET"])
@login_required
def samsara_list_vehicles():
    try:
        headers = get_samsara_headers()
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á—å limit/–ø–∞–≥–∏–Ω–∏—Ä—É–π (Samsara –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç nextPageToken)
        r = requests.get(f"{BASE_URL}/fleet/vehicles?limit=1000", headers=headers, timeout=20)
        if not r.ok:
            return jsonify({"error": "Samsara vehicles fetch failed", "details": r.text}), r.status_code
        return jsonify(r.json().get("data", []))
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# 2) –†—É—á–Ω–∞—è —Å–≤—è–∑–∫–∞: TMS unit ‚Üî Samsara vehicle (–∏ –∑–∞–ø–∏—Å—å externalIds –≤ Samsara)
@samsara_bp.route("/api/samsara/link_vehicle", methods=["POST"])
@login_required
def link_vehicle():
    """
    Body: { "unit_id": "<trucks._id>", "samsara_vehicle_id": "<Samsara Vehicle id>" }
    –î–µ–π—Å—Ç–≤–∏—è:
      - –æ–±–Ω–æ–≤–ª—è–µ—Ç trucks.samsara_vehicle_id –≤ –Ω–∞—à–µ–π –ë–î
      - –ø–∏—à–µ—Ç –≤ Samsara externalIds.tmsVehicleId = <–Ω–∞—à _id>
    """
    try:
        data = request.get_json(force=True) or {}
        unit_id = data.get("unit_id")
        samsara_vehicle_id = data.get("samsara_vehicle_id")
        if not unit_id or not samsara_vehicle_id:
            return jsonify({"error": "unit_id and samsara_vehicle_id are required"}), 400

        try:
            unit_oid = ObjectId(unit_id)
        except Exception:
            return jsonify({"error": "Invalid unit_id"}), 400

        # –ª–æ–∫–∞–ª—å–Ω–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–≤—è–∑–∫—É —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        upd = trucks_collection.update_one(
            {"_id": unit_oid, "company": current_user.company},
            {"$set": {"samsara_vehicle_id": samsara_vehicle_id}},
        )
        if upd.matched_count == 0:
            return jsonify({"error": "Unit not found"}), 404

        # –≤ Samsara: –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à –≤–Ω–µ—à–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        headers = get_samsara_headers()
        patch_url = f"{BASE_URL}/fleet/vehicles/{samsara_vehicle_id}"
        payload = {"externalIds": {"tmsVehicleId": str(unit_oid)}}
        resp = requests.patch(patch_url, headers=headers, json=payload, timeout=20)
        if not resp.ok:
            return jsonify({"error": "Failed to update externalIds in Samsara", "details": resp.text}), resp.status_code

        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"error": str(e)}), 500



# üîΩ –≤—Å—Ç–∞–≤—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª, –≥–¥–µ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω samsara_bp = Blueprint('samsara', __name__)
@samsara_bp.route("/api/samsara/link_vehicle_qs", methods=["GET"])
@login_required
def link_vehicle_qs():
    from bson import ObjectId

    unit_id = request.args.get("unit_id")
    samsara_vehicle_id = request.args.get("samsara_vehicle_id")
    if not unit_id or not samsara_vehicle_id:
        return jsonify({"error": "unit_id and samsara_vehicle_id are required"}), 400

    # –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º samsara_vehicle_id –≤ –Ω–∞—à–µ–º —é–Ω–∏—Ç–µ
    try:
        unit_oid = ObjectId(unit_id)
    except Exception:
        return jsonify({"error": "Invalid unit_id"}), 400

    upd = db["trucks"].update_one(
        {"_id": unit_oid, "company": current_user.company},
        {"$set": {"samsara_vehicle_id": samsara_vehicle_id}},
    )
    if upd.matched_count == 0:
        return jsonify({"error": "Unit not found"}), 404

    # –≤ Samsara –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º externalIds.tmsVehicleId
    headers = get_samsara_headers()
    patch_url = f"{BASE_URL}/fleet/vehicles/{samsara_vehicle_id}"
    payload = {"externalIds": {"tmsVehicleId": str(unit_oid)}}
    resp = requests.patch(patch_url, headers=headers, json=payload, timeout=20)
    if not resp.ok:
        return jsonify({"error": "Failed to update externalIds in Samsara", "details": resp.text}), resp.status_code

    return jsonify({"success": True, "linked": {"unit_id": str(unit_oid), "samsara_vehicle_id": samsara_vehicle_id}})



# 3) –ê–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ VIN (—Ä–∞–∑–æ–≤–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–æ–∫)
@samsara_bp.route("/api/samsara/auto_match_by_vin", methods=["POST"])
@login_required
def auto_match_by_vin():
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –Ω–∞—à–∏–º —é–Ω–∏—Ç–∞–º (–≤ —Ä–∞–º–∫–∞—Ö company) —Å VIN –∏ –∏—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–µ–¥–∏ –º–∞—à–∏–Ω Samsara.
    –ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ VIN:
      - —Å—Ç–∞–≤–∏—Ç trucks.samsara_vehicle_id
      - –ø–∏—à–µ—Ç externalIds.tmsVehicleId –≤ Samsara
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π.
    """
    try:
        headers = get_samsara_headers()

        # –Ω–∞—à–∏ —é–Ω–∏—Ç—ã —Å VIN
        my_trucks = list(
            trucks_collection.find(
                {"company": current_user.company, "vin": {"$exists": True, "$ne": ""}},
                {"_id": 1, "vin": 1},
            )
        )
        if not my_trucks:
            return jsonify({"matched": 0, "processed": 0})

        # –º–∞—à–∏–Ω—ã –∏–∑ Samsara
        r = requests.get(f"{BASE_URL}/fleet/vehicles?limit=1000", headers=headers, timeout=20)
        if not r.ok:
            return jsonify({"error": "Failed to fetch vehicles from Samsara", "details": r.text}), r.status_code
        samsara_list = r.json().get("data", [])

        # –∫–∞—Ä—Ç–∞ VIN -> vehicle
        samsara_by_vin = {}
        for v in samsara_list:
            vin = (v.get("vin") or "").strip().upper()
            if vin:
                samsara_by_vin[vin] = v

        matched = 0
        for t in my_trucks:
            vin = (t.get("vin") or "").strip().upper()
            sv = samsara_by_vin.get(vin)
            if not sv:
                continue

            samsara_vehicle_id = sv.get("id")
            if not samsara_vehicle_id:
                continue

            # –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∫—É
            trucks_collection.update_one(
                {"_id": t["_id"]},
                {"$set": {"samsara_vehicle_id": samsara_vehicle_id}},
            )

            # –≤–Ω–µ—à–Ω–∏–µ ID –≤ Samsara
            patch_url = f"{BASE_URL}/fleet/vehicles/{samsara_vehicle_id}"
            payload = {"externalIds": {"tmsVehicleId": str(t["_id"])}}
            resp = requests.patch(patch_url, headers=headers, json=payload, timeout=20)
            if resp.ok:
                matched += 1

        return jsonify({"matched": matched, "processed": len(my_trucks)})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# 4) –†–µ–≤–∏–∑–∏—è —Å–≤—è–∑–æ–∫ (–ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ –Ω–∞–¥–æ –ø–æ—á–∏–Ω–∏—Ç—å)
@samsara_bp.route("/api/samsara/reconcile_links", methods=["GET"])
@login_required
def reconcile_links():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–≤—è–∑–æ–∫:
      - –ª–æ–∫–∞–ª—å–Ω–æ: —é–Ω–∏—Ç—ã –±–µ–∑ samsara_vehicle_id
      - –≤ Samsara: –º–∞—à–∏–Ω—ã –±–µ–∑ externalIds.tmsVehicleId
      - mismatch: –∫–æ–≥–¥–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π samsara_vehicle_id != —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É id —É –º–∞—à–∏–Ω—ã, –≥–¥–µ externalIds.tmsVehicleId —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —é–Ω–∏—Ç
    """
    try:
        headers = get_samsara_headers()

        # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        my_trucks = list(
            trucks_collection.find(
                {"company": current_user.company},
                {"_id": 1, "unit_number": 1, "vin": 1, "samsara_vehicle_id": 1},
            )
        )
        by_local_id = {str(t["_id"]): t for t in my_trucks}

        # –º–∞—à–∏–Ω—ã –∏–∑ Samsara
        r = requests.get(f"{BASE_URL}/fleet/vehicles?limit=1000", headers=headers, timeout=20)
        if not r.ok:
            return jsonify({"error": "Failed to fetch vehicles from Samsara", "details": r.text}), r.status_code
        samsara_list = r.json().get("data", [])

        issues = []

        # 4.1: –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏
        for t in my_trucks:
            if not t.get("samsara_vehicle_id"):
                issues.append(
                    {
                        "type": "missing_local_link",
                        "truck_id": str(t["_id"]),
                        "unit_number": t.get("unit_number"),
                        "vin": t.get("vin"),
                    }
                )

        # 4.2: –≤ Samsara –Ω–µ—Ç externalIds.tmsVehicleId –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑–∫–∞
        for v in samsara_list:
            eid = (v.get("externalIds") or {}).get("tmsVehicleId")
            samsara_id = v.get("id")
            if eid and eid in by_local_id:
                # –µ—Å—Ç—å —Å–≤—è–∑—å ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
                if by_local_id[eid].get("samsara_vehicle_id") != samsara_id:
                    issues.append(
                        {
                            "type": "mismatch",
                            "truck_id": eid,
                            "expected_samsara_id": by_local_id[eid].get("samsara_vehicle_id"),
                            "actual_samsara_id": samsara_id,
                            "vin": v.get("vin"),
                        }
                    )
            else:
                # –≤ —Å–∞–º—Å–∞—Ä–µ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∞—à –≤–Ω–µ—à–Ω–∏–π ID
                issues.append(
                    {
                        "type": "missing_external_id",
                        "samsara_id": samsara_id,
                        "vin": v.get("vin"),
                        "name": v.get("name"),
                        "licensePlate": v.get("licensePlate"),
                    }
                )

        return jsonify({"issues": issues})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
