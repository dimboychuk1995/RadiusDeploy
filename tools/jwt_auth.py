# tools/jwt_auth.py

import jwt
from functools import wraps
from flask import request, jsonify, current_app, g


def jwt_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if request.method == 'OPTIONS':
            return f(*args, **kwargs)

        print("üõ°Ô∏è JWT –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª")
        print("üì© –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", dict(request.headers))

        auth_header = request.headers.get('Authorization', '')
        print("üîë Authorization header:", auth_header)

        if not auth_header.startswith('Bearer '):
            print("‚ùå –ù–µ—Ç Bearer —Ç–æ–∫–µ–Ω–∞")
            return jsonify({'success': False, 'error': 'Missing or invalid token'}), 401

        token = auth_header.split(' ')[1]
        try:
            jwt_secret = current_app.config["JWT_SECRET"]
            payload = jwt.decode(token, jwt_secret, algorithms=["HS256"])

            g.user_id = payload['user_id']
            g.role = payload['role']
            g.username = payload.get('username', '')
            print("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, g.user_id =", g.user_id)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", e)
            return jsonify({'success': False, 'error': 'Invalid token'}), 401

        return f(*args, **kwargs)
    return decorated_function